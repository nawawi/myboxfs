<?php
if(!defined('_CLI_CODE')||_CLI_CODE!="a098846421a09ab1cacd3b3a753cbe05") exit("\n\nERROR: _CLI_CODE not set\n\n");

function ___CLI_ROUTE_CONFIG_STATIC_PRINT($_find='') {
	$_objf=_OBJ_PATH."/iosh_route_static_print.obj";
	@unlink($_objf);
	_INI_TOKEN_GET("network","route_static.cfg",$_TOKEN);
	if(_ARRAY_NULL($_TOKEN)) {
              	_CLI_ECHO(_GETTEXT("No data available"));
                return FALSE;
	}
	$_cnt=1;$_obj=array();
	$_output="";$_DTX=array();
	foreach($_TOKEN as $_ID => $_DATA) {
		if(_NULL($_DATA['ROUTE_NETWORK'])
			|| _NULL($_DATA['ROUTE_TYPE'])) {
			_INI_TOKEN_DELETE("network","route_static.cfg",$_ID);
			continue;
		}
		if(_NULL($_DATA['STAT'])) $_DATA['STAT']=0;
		_STR_ONOFF($_stat,$_DATA['STAT']);
		$_DATA['STAT']=$_stat;

		_DEFINITIONS_GET_BYNAME_R("networks",$_DATA['ROUTE_NETWORK'],$_DTOKEN);
		if(!_ARRAY_NULL($_DTOKEN)) {
			foreach($_DTOKEN as $_DID => $_DDATA) {
				if(!_NULL($_DDATA['ADDR'])) {
					$_DATA['ADDR'] .="{$_DDATA['ADDR']},";
				}
			}
			_TRIM($_DATA['ADDR'],",");
			if(!_NULL($_DATA['ADDR'])) $_DATA['ROUTE_NETWORK']="{$_DATA['ROUTE_NETWORK']} [{$_DATA['ADDR']}]";
		}
		unset($_DTOKEN);
		if($_DATA['ROUTE_TYPE']=="gateway") {
			_DEFINITIONS_GET_BYNAME("networks",$_DATA['ROUTE_GATEWAY'],$_DTOKEN,"host");
			if(!_NULL($_DTOKEN['ADDR'])) $_DATA['ROUTE_GATEWAY']="{$_DATA['ROUTE_GATEWAY']} [{$_DTOKEN['ADDR']}]";
		}
		unset($_DTOKEN);

		if(!_NULL($_find)) {
			if(!_ARRAY_FIND($_find,$_DATA)) {
				continue;
			}
		}

		if($_cnt > 1) $_DTX[$_cnt][__CLI_DATA_NL]=1;
		$_DTX[$_cnt][_GETTEXT_U("ID")]=$_cnt;
		$_DTX[$_cnt][_GETTEXT_U("TYPE")]=$_DATA['ROUTE_TYPE'];
		$_DTX[$_cnt][_GETTEXT_U("NETWORK")]=$_DATA['ROUTE_NETWORK'];
		if($_DATA['ROUTE_TYPE']=="interface") {
			$_DTX[$_cnt][_GETTEXT_U("INTERFACE")]=$_DATA['DNAME'];
		}
		if($_DATA['ROUTE_TYPE']=="gateway") {
			$_DTX[$_cnt][_GETTEXT_U("GATEWAY")]=$_DATA['ROUTE_GATEWAY'];
		}
		$_DTX[$_cnt][_GETTEXT_U("ENABLE")]=$_DATA['STAT'];
		$_DTX[$_cnt][_GETTEXT_U("DESCRIPTION")]=$_DATA['NOTE'];

		$_obj[$_cnt]['id']=$_ID;
		$_obj[$_cnt]['type']=$_DATA['ROUTE_TYPE'];
		unset($_DTOKEN);
		$_cnt++;
	}
	if(!_ARRAY_NULL($_DTX)) {
		$_output .=_CLI_DATA_BODY_R($_DTX);
		unset($_DTX);
	}
	if(_ARRAY_NULL($_obj) || !_FILE_ARRAY_SAVE($_objf,$_obj) || _NULL($_output)) {
		if(!_NULL($_find)) {
			_CLI_ECHO(_GETTEXT("No results found"));
		} else {
			_CLI_ECHO(_GETTEXT("No data available"));
		}
		@unlink($_objf);
                return FALSE;
	}
	_CLI_ECHO_HEADER(_GETTEXT("Static routes configuration"));
	if(!_NULL($_find)) {
		echo _GETTEXT("Search results match for '%s':","$_find")."\n\n";
	}
	echo "$_output";
	return TRUE;
}

function ___CLI_ROUTE_CONFIG_STATIC_ADD($_args) {
	if(!_ARRAY_NULL($_args)) {
		$_DATA=array();
		$_param=$_args[0];
		if($_param=="interface") {
			$_objf=_OBJ_PATH."/iosh_definitions_networks_print.obj";
			$_obj=_FILE_ARRAY_GET($_objf);
			if(_ARRAY_NULL($_obj)) {
				_CLI_ECHO(_GETTEXT("Resource Id not available."));
				_CLI_ECHO(_GETTEXT("Enter -> '%s' to view Resource Id.","definitions networks print"));
				@unlink($_objf);
				return FALSE;
			}
			$_sid=$_args[1];
			$_inf=$_args[2];
			_STR_ONOFF($_stat,$_args[3]);
			$_network=___CLI_DEFINITIONS_OBJGETNAME($_obj,"networks",$_sid);
			if(_NULL($_network)) {
				_CLI_ECHO(_GETTEXT("Resource Id '%s' not available.","$_sid"));
				_CLI_ECHO(_GETTEXT("Enter -> '%s' to view Resource Id.","definitions networks print"));
				@unlink($_objf);
				return FALSE;
			}
			$_DATA['ROUTE_NETWORK']="$_network"; 
			if(___CLI_DEFINITIONS_NETWORKS_ADD_INT($_inf,$_val)) {
				$_DATA['DNAME']="$_val";
			}
			$_DATA['STAT']="$_stat";
			$_DATA['NOTE']="{$_args[4]}";
			$_DATA['ROUTE_TYPE']="$_param";
		} elseif($_param=="gateway") {
			$_objf=_OBJ_PATH."/iosh_definitions_networks_print.obj";
			$_obj=_FILE_ARRAY_GET($_objf);
			if(_ARRAY_NULL($_obj)) {
				_CLI_ECHO(_GETTEXT("Resource Id not available."));
				_CLI_ECHO(_GETTEXT("Enter -> '%s' to view Resource Id.","definitions networks print"));
				@unlink($_objf);
				return FALSE;
			}
			$_sid=$_args[1];
			$_gid=$_args[2];
			_STR_ONOFF($_stat,$_args[3]);
			$_network=___CLI_DEFINITIONS_OBJGETNAME($_obj,"networks",$_sid);
			if(_NULL($_network)) {
				_CLI_ECHO(_GETTEXT("Resource Id '%s' not available.","$_sid"));
				_CLI_ECHO(_GETTEXT("Enter -> '%s' to view Resource Id.","definitions networks print"));
				@unlink($_objf);
				return FALSE;
			}
			$_gateway=___CLI_DEFINITIONS_OBJGETNAME($_obj,"networks",$_gid,"host");
			if(_NULL($_gateway)) {
				_CLI_ECHO(_GETTEXT("Resource Id '%s' not available.","$_gid"));
				_CLI_ECHO(_GETTEXT("Enter -> '%s' to view Resource Id.","definitions networks print host"));
				@unlink($_objf);
				return FALSE;
			}
			$_DATA['ROUTE_NETWORK']="$_network";
			$_DATA['ROUTE_GATEWAY']="$_gateway";
			$_DATA['STAT']="$_stat";
			$_DATA['NOTE']="{$_args[4]}";
			$_DATA['ROUTE_TYPE']="$_param";
		} elseif($_param=="blackhole" || $_param=="prohibit" || $_param=="unreachable") {
			$_objf=_OBJ_PATH."/iosh_definitions_networks_print.obj";
			$_obj=_FILE_ARRAY_GET($_objf);
			if(_ARRAY_NULL($_obj)) {
				_CLI_ECHO(_GETTEXT("Resource Id not available."));
				_CLI_ECHO(_GETTEXT("Enter -> '%s' to view Resource Id.","definitions networks print"));
				@unlink($_objf);
				return FALSE;
			}
			$_sid=$_args[1];
			_STR_ONOFF($_stat,$_args[2]);
			$_network=___CLI_DEFINITIONS_OBJGETNAME($_obj,"networks",$_sid);
			if(_NULL($_network)) {
				_CLI_ECHO(_GETTEXT("Resource Id '%s' not available.","$_sid"));
				_CLI_ECHO(_GETTEXT("Enter -> '%s' to view Resource Id.","definitions networks print"));
				@unlink($_objf);
				return FALSE;
			}
			$_DATA['ROUTE_NETWORK']="$_network";
			$_DATA['STAT']="$_stat";
			$_DATA['NOTE']="{$_args[3]}";
			$_DATA['ROUTE_TYPE']="$_param";
		}

		if(!_ARRAY_NULL($_DATA) && _INI_TOKEN_SAVE("network","route_static.cfg",$_DATA)) {
			_CLI_ECHO(_GETTEXT("Configuration saved successfully"));
			return TRUE;
		}

	}
	return _CLI_DEFAULT_RETURN();
}

function ___CLI_ROUTE_CONFIG_STATIC_SET($_args) {
	if(!_ARRAY_NULL($_args)) {
		$_objf=_OBJ_PATH."/iosh_route_static_print.obj";
		$_obj=_FILE_ARRAY_GET($_objf);
		$_type=$_args[0];
		$_opt=$_args[1];
		$_id=$_args[2];
		$_val=$_args[3];
		if(_ARRAY_NULL($_obj) || _NULL($_obj[$_id]['id']) || _NULL($_obj[$_id]['type'])) {
			_CLI_ECHO(_GETTEXT("No Resource Id available."));
			_CLI_ECHO(_GETTEXT("Enter -> '%s' to view Resource Id.","static-routes print"));
			@unlink($_objf);
			return FALSE;
		}
		$_sid=$_obj[$_id]['id'];
		$_stype=$_obj[$_id]['type'];
		if($_type!="$_stype") {
			_CLI_ECHO(_GETTEXT("Invalid route type."));
			return FALSE;
		}
		$_DATA=array();
		if($_opt=="enable") {
			_STR_ONOFF($_stat,$_val);
			$_DATA['STAT']="$_stat";
		} elseif($_opt=="description") {
			$_DATA['NOTE']="$_val";
		} elseif($_opt=="network") {
			$_nobjf=_OBJ_PATH."/iosh_definitions_networks_print.obj";
			$_nobj=_FILE_ARRAY_GET($_objf);
			if(_ARRAY_NULL($_nobj)) {
				_CLI_ECHO(_GETTEXT("Resource Id for definition network not available."));
				_CLI_ECHO(_GETTEXT("Enter -> '%s' to view Resource Id.","definitions networks print"));
				@unlink($_nobjf);
				return FALSE;
			}
			$_network=___CLI_DEFINITIONS_OBJGETNAME($_nobj,"networks",$_val);
			if(_NULL($_network)) {
				_CLI_ECHO(_GETTEXT("Resource Id '%s' not available.","$_val"));
				_CLI_ECHO(_GETTEXT("Enter -> '%s' to view Resource Id.","definitions networks print"));
				@unlink($_nobjf);
				return FALSE;
			}
			$_DATA['ROUTE_NETWORK']="$_network";
		} elseif($_opt=="gateway") {
			$_gobjf=_OBJ_PATH."/iosh_definitions_networks_print.obj";
			$_gobj=_FILE_ARRAY_GET($_gobjf);
			if(_ARRAY_NULL($_gobj)) {
				_CLI_ECHO(_GETTEXT("Resource Id for definition network host not available."));
				_CLI_ECHO(_GETTEXT("Enter -> '%s' to view Resource Id.","definitions networks print host"));
				@unlink($_nobjf);
				return FALSE;
			}
			$_gateway=___CLI_DEFINITIONS_OBJGETNAME($_gobj,"networks",$_val,"host");
			if(_NULL($_gateway)) {
				_CLI_ECHO(_GETTEXT("Resource Id '%s' not available.","$_val"));
				_CLI_ECHO(_GETTEXT("Enter -> '%s' to view Resource Id.","definitions networks print host"));
				@unlink($_gobjf);
				return FALSE;
			}
			$_DATA['ROUTE_GATEWAY']="$_gateway";
		} elseif($_opt=="interface") {
			if(!___CLI_DEFINITIONS_NETWORKS_ADD_INT($_val,$_dname)) return FALSE;
			$_DATA['DNAME']="$_dname";
		}
		if(!_ARRAY_NULL($_DATA) && _INI_TOKEN_UPDATE("network","route_static.cfg",$_sid,$_DATA)) {
			_CLI_ECHO(_GETTEXT("Configuration saved successfully"));
			return TRUE;
		}
	}
	return _CLI_DEFAULT_RETURN();
}

function ___CLI_ROUTE_CONFIG_STATIC_DELETE($_nums) {
	$_objf=_OBJ_PATH."/iosh_route_static_print.obj";
	$_obj=_FILE_ARRAY_GET($_objf);
	if(_ARRAY_NULL($_obj)) {
		_CLI_ECHO(_GETTEXT("No Resource Id available."));
		_CLI_ECHO(_GETTEXT("Enter -> '%s' to view Resource Id.","static-routes print"));
		@unlink($_objf);
		return FALSE;
	}
	if($_nums=='*' && _CLI_YESNO(_GETTEXT("This action will delete all %s.\nContinue this action? %s","Static route configuration","[yes/no]: "))==TRUE) {
		foreach($_obj as $_cnt => $_nval) {
			if(_INI_TOKEN_DELETE("network","route_static.cfg",$_nval['id'])) {
				unset($_obj[$_cnt]);
			}
		}
		if(_FILE_ARRAY_SAVE($_objf,$_obj)) {
			return TRUE;
		}
	} else {
		$_num_array=array();
		_CLI_MULTINUM($_nums,$_num_array);
		foreach($_num_array as $_no) {
			if(!_NULL($_obj[$_no]['id'])) {
				if(_INI_TOKEN_DELETE("network","route_static.cfg",$_obj[$_no]['id'])) {
					unset($_obj[$_no]);
				}
			}
		}
		if(_FILE_ARRAY_SAVE($_objf,$_obj)) {
			return TRUE;
		}
	}
	return _CLI_DEFAULT_RETURN();
}

?>
