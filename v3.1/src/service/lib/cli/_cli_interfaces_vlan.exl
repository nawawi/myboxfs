<?php
if(!defined('_CLI_CODE')||_CLI_CODE!="a098846421a09ab1cacd3b3a753cbe05") exit("\n\nERROR: _CLI_CODE not set\n\n");

function ___CLI_INTERFACES_ADD_VLAN($_args) {
	if(!_ARRAY_NULL($_args)) {
		$_objf=_OBJ_PATH."/iosh_definitions_networks_interface.obj";
		$_obj=_FILE_ARRAY_GET($_objf);
		$_name=$_args[0];
		$_did=$_args[1];
		$_tag=$_args[2];
		$_ip=$_args[3];
		$_nmask=$_args[4];
		$_note=$_args[5];
		if(_ARRAY_NULL($_obj) || _NULL($_obj[$_did])) {
			_CLI_ECHO(_GETTEXT("Resource Id '%s' not available.","$_did"));
			_CLI_ECHO(_GETTEXT("Enter -> '%s' to view Resource Id.","ip device"));
			@unlink($_objf);
			return FALSE;
		}
		if(!_CHECK_IP($_ip)) {
			_CLI_ECHO(_GETTEXT("Invalid IP Address"));
			return FALSE;
		}
		if(!_INI_TOKEN_CHECK("network","eth.cfg","NAME","$_name")&&
			!_INI_TOKEN_CHECK("network","additional.cfg","NAME","$_name")) {
			_CLI_ECHO(_GETTEXT("Interface name '%s' already exist","$_name"));
			return FALSE;
		}
		if(!_INI_TOKEN_CHECK("network","eth.cfg","ADDR","$_ip") &&
			!_INI_TOKEN_CHECK("network","additional.cfg","ADDR","$_ip")) {
			_CLI_ECHO(_GETTEXT("Interface address '%s' already exist","$_ip"));
			return FALSE;
		}
		$_ID=$_obj[$_did];
		if(_HOST_PING($_ip)) {
			if(!_CLI_YESNO(_GETTEXT("IP Address '%s' already in used. Continue this action? %s","$_ip","[yes/no]: "))) {
				return FALSE;
			}
		}
		_IPCALC::IP($_RESULT,$_ip,$_nmask);
		$_DATA=array();
		$_DATA['NAME']="$_name";
		$_DATA['TYPE']="vlan";
		$_DATA['TAG']="$_tag";
		$_DATA['STAT']=0;
		$_DATA['ADDR']="$_ip";
		$_DATA['MASK']=$_RESULT['netmask'];
		$_DATA['PREF']=$_RESULT['prefix'];
		$_DATA['INET']=$_RESULT['inet'];
		$_DATA['MTU']=1500;
		$_DATA['DEFAULT']=0;
		$_DATA['GATEWAY']="";
		$_DATA['UPLINK']=0;
		$_DATA['NAT']=0;
		$_DATA['NOTE']="$_note";
		if(!_ARRAY_NULL($_DATA) && _INI_TOKEN_UPDATE("network","eth.cfg",$_ID,$_DATA)) {
			_CLI_ECHO(_GETTEXT("Configuration saved successfully"));
			return TRUE;
		}
	}
	return _CLI_DEFAULT_RETURN();
}

function ___CLI_INTERFACES_SET_VLAN($_args) {
	if(!_ARRAY_NULL($_args)) {
		$_objf=_OBJ_PATH."/iosh_interfaces_ip_print.obj";
		$_obj=_FILE_ARRAY_GET($_objf);
		$_param=$_args[0];
		$_sid=$_args[1];
		if(_ARRAY_NULL($_obj) || _NULL($_obj[$_sid])) {
			_CLI_ECHO(_GETTEXT("Resource Id '%s' not available.","$_sid"));
			_CLI_ECHO(_GETTEXT("Enter -> '%s' to view Resource Id.","ip print"));
			@unlink($_objf);
			return FALSE;
		}
		$_ID=$_obj[$_sid];
		_INI_TOKEN_GET_BYPARAM("network","eth.cfg","ID","$_ID",$_ITOKEN);
		if(_ARRAY_NULL($_ITOKEN)) {
			_CLI_ECHO(_GETTEXT("No data available for Resource Id '%s'","$_sid"));
			return FALSE;
		}
		if(!_NULL($_ITOKEN['TYPE'])&&$_ITOKEN['TYPE']!="vlan") {
			_CLI_ECHO(_GETTEXT("Invalid interface type '%s'","{$_ITOKEN['TYPE']}"));
			return FALSE;
		}
		if($_param=="gateway") {
			$_enab=$_args[2];
			$_gw=$_args[3];
			_STR_ONOFF($_default,$_enab);
			if(!_NULL($_gw) && !_CHECK_IP($_gw)) {
				_CLI_ECHO(_GETTEXT("Invalid gateway Address '%s'","$_gw"));
				return FALSE;
			}
			if($_default==1 && _CHCK_DEFAULTGW()) {
				_CLI_ECHO(_GETTEXT("Default gateway already defined on other interface"));
				return FALSE;
			}
			$_DATA=array();
			$_DATA['DEFAULT']=$_default;
			if(!_NULL($_gw)) $_DATA['GATEWAY']=$_gw;
			if(!_ARRAY_NULL($_DATA) && _INI_TOKEN_UPDATE("network","eth.cfg",$_ID,$_DATA)) {
				_CLI_ECHO(_GETTEXT("Configuration saved successfully"));
				return TRUE;
			}
		} elseif($_param=="enable") {
			_STR_ONOFF($_enab,$_args[2]);
			$_DATA=array();
			$_DATA['STAT']=$_enab;
			if(!_ARRAY_NULL($_DATA) && _INI_TOKEN_UPDATE("network","eth.cfg",$_ID,$_DATA)) {
				_CLI_ECHO(_GETTEXT("Configuration saved successfully"));
				return TRUE;
			}
		} elseif($_param=="tag") {
			$_DATA=array();
			$_DATA['TAG']=$_args[2];
			if(!_ARRAY_NULL($_DATA) && _INI_TOKEN_UPDATE("network","eth.cfg",$_ID,$_DATA)) {
				_CLI_ECHO(_GETTEXT("Configuration saved successfully"));
				return TRUE;
			}
		} elseif($_param=="uplink") {
			$_enab=$_args[2];
			_STR_ONOFF($_uplink,$_enab);
			$_DATA=array();
			$_DATA['UPLINK']=$_uplink;
			if(!_ARRAY_NULL($_DATA) && _INI_TOKEN_UPDATE("network","eth.cfg",$_ID,$_DATA)) {
				_CLI_ECHO(_GETTEXT("Configuration saved successfully"));
				return TRUE;
			}
		} elseif($_param=="nat") {
			$_enab=$_args[2];
			_STR_ONOFF($_nat,$_enab);
			$_DATA=array();
			$_DATA['NAT']=$_nat;
			if(!_ARRAY_NULL($_DATA) && _INI_TOKEN_UPDATE("network","eth.cfg",$_ID,$_DATA)) {
				_CLI_ECHO(_GETTEXT("Configuration saved successfully"));
				return TRUE;
			}
		} elseif($_param=="mtu") {
			$_mtu=$_args[2];
			if(!_ISNUM($_mtu)) {
				_CLI_ECHO(_GETTEXT("Invalid MTU size '%s'","$_mtu"));
				return FALSE;
			}
			$_DATA=array();
			$_DATA['MTU']=$_mtu;
			if(!_ARRAY_NULL($_DATA) && _INI_TOKEN_UPDATE("network","eth.cfg",$_ID,$_DATA)) {
				_CLI_ECHO(_GETTEXT("Configuration saved successfully"));
				return TRUE;
			}
		} elseif($_param=="name") {
			$_name=$_args[2];
			if(!_NULL($_ITOKEN['NAME'])) {
				if($_name!=$_ITOKEN['NAME']) {
					if(!_INI_TOKEN_CHECK("network","eth.cfg","NAME","$_name") &&
						!_INI_TOKEN_CHECK("network","additional.cfg","NAME","$_name")) {
						_CLI_ECHO(_GETTEXT("Interface name '%s' already exist","$_name"));
						return FALSE;
					}
				}
			}
			$_DATA=array();
			$_DATA['NAME']=$_name;
			if(!_ARRAY_NULL($_DATA) && _INI_TOKEN_UPDATE("network","eth.cfg",$_ID,$_DATA)) {
				_CLI_ECHO(_GETTEXT("Configuration saved successfully"));
				return TRUE;
			}
		} elseif($_param=="address") {
			$_ip=$_args[2];
			if(!_CHECK_IP($_ip)) {
				_CLI_ECHO(_GETTEXT("Invalid IP Address '%s'","$_ip"));
				return FALSE;
			}
			if(!_NULL($_ITOKEN['ADDR'])) {
				if($_ip!=$_ITOKEN['ADDR']) {
					if(!_INI_TOKEN_CHECK("network","eth.cfg","ADDR","$_ip") &&
						!_INI_TOKEN_CHECK("network","additional.cfg","ADDR","$_ip")) {
						_CLI_ECHO(_GETTEXT("Interface address '%s' already exist","$_ip"));
						return FALSE;
					}
				}
			}
			if(_HOST_PING($_ip)) {
				if(!_CLI_YESNO(_GETTEXT("IP Address '%s' already in used. Continue this action? %s","$_ip","[yes/no]: "))) {
					return FALSE;
				}
			}
			$_DATA=array();
			$_DATA['ADDR']=$_ip;
			if(!_ARRAY_NULL($_DATA) && _INI_TOKEN_UPDATE("network","eth.cfg",$_ID,$_DATA)) {
				_CLI_ECHO(_GETTEXT("Configuration saved successfully"));
				return TRUE;
			}
		} elseif($_param=="netmask") {
			$_nmask=$_args[2];
			if(!_NULL($_ITOKEN['ADDR'])) {
				_IPCALC::IP($_RESULT,$_ITOKEN['ADDR'],$_nmask);
				$_DATA=array();
				$_DATA['MASK']=$_RESULT['netmask'];
				$_DATA['PREF']=$_RESULT['prefix'];
				$_DATA['INET']=$_RESULT['inet'];
				if(!_ARRAY_NULL($_DATA) && _INI_TOKEN_UPDATE("network","eth.cfg",$_ID,$_DATA)) {
					_CLI_ECHO(_GETTEXT("Configuration saved successfully"));
					return TRUE;
				}
			}
		} elseif($_param=="description") {
			$_DATA=array();
			$_DATA['NOTE']=$_args[2];
			if(!_ARRAY_NULL($_DATA) && _INI_TOKEN_UPDATE("network","eth.cfg",$_ID,$_DATA)) {
				_CLI_ECHO(_GETTEXT("Configuration saved successfully"));
				return TRUE;
			}
		}
	}
	return _CLI_DEFAULT_RETURN();
}

?>
