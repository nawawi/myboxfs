<?php
if(!defined('_CLI_CODE')||_CLI_CODE!="a098846421a09ab1cacd3b3a753cbe05") exit("\n\nERROR: _CLI_CODE not set\n\n");

function ___CLI_INTERFACES_ADD_VIP($_args) {
	if(!_ARRAY_NULL($_args)) {
		$_objf=_OBJ_PATH."/iosh_interfaces_ip_print.obj";
		$_obj=_FILE_ARRAY_GET($_objf);
		$_name=$_args[0];
		$_did=$_args[1];
		$_ip=$_args[2];
		$_nmask=$_args[3];
		$_note=$_args[4];
		if(_ARRAY_NULL($_obj) || _NULL($_obj[$_did])) {
			_CLI_ECHO(_GETTEXT("Resource Id '%s' not available.","$_did"));
			_CLI_ECHO(_GETTEXT("Enter -> '%s' to view Resource Id.","ip print"));
			@unlink($_objf);
			return FALSE;
		}
		if(!_CHECK_IP($_ip)) {
			_CLI_ECHO(_GETTEXT("Invalid IP Address '%s'","$_ip"));
			return FALSE;
		}
		if(!_INI_TOKEN_CHECK("network","eth.cfg","NAME","$_name")||
			!_INI_TOKEN_CHECK("network","additional.cfg","NAME","$_name")) {
			_CLI_ECHO(_GETTEXT("Interface name '%s' already exist","$_name"));
			return FALSE;
		}
		if(!_INI_TOKEN_CHECK("network","eth.cfg","ADDR","$_ip") ||
			!_INI_TOKEN_CHECK("network","additional.cfg","ADDR","$_ip")) {
			_CLI_ECHO(_GETTEXT("Interface address '%s' already exist","$_ip"));
			return FALSE;
		}
		$_ID=$_obj[$_did];
		if(_HOST_PING($_ip)) {
			if(!_CLI_YESNO(_GETTEXT("IP Address '%s' already in used. Continue this action? %s","$_ip","[yes/no]: "))) {
				return FALSE;
			}
		}
		_INI_TOKEN_GET_BYPARAM("network","eth.cfg","ID","$_ID",$_ITOKEN);
		if(!_ARRAY_NULL($_ITOKEN) && !_NULL($_ITOKEN['NAME'])) {
			_IPCALC::IP($_RESULT,$_ip,$_nmask);
			$_DATA=array();
			$_DATA['NAME']="$_name";
			$_DATA['PNAME']=$_ITOKEN['NAME'];
			$_DATA['STAT']=1;
			$_DATA['ADDR']="$_ip";
			$_DATA['MASK']=$_RESULT['netmask'];
			$_DATA['PREF']=$_RESULT['prefix'];
			$_DATA['INET']=$_RESULT['inet'];
			$_DATA['NOTE']="$_note";
			if(!_ARRAY_NULL($_DATA) && _INI_TOKEN_SAVE("network","additional.cfg",$_DATA)) {
				_CLI_ECHO(_GETTEXT("Configuration saved successfully"));
				return TRUE;
			}
		}
	}
	return _CLI_DEFAULT_RETURN();
}

function ___CLI_INTERFACES_SET_VIP($_args) {
	if(!_ARRAY_NULL($_args)) {
		$_objf=_OBJ_PATH."/iosh_interfaces_vip_print.obj";
		$_obj=_FILE_ARRAY_GET($_objf);
		$_param=$_args[0];
		$_sid=$_args[1];
		if(_ARRAY_NULL($_obj) || _NULL($_obj[$_sid])) {
			_CLI_ECHO(_GETTEXT("Resource Id '%s' not available.","$_sid"));
			_CLI_ECHO(_GETTEXT("Enter -> '%s' to view Resource Id.","vip print"));
			@unlink($_objf);
			return FALSE;
		}
		$_ID=$_obj[$_sid];
		_INI_TOKEN_GET_BYPARAM("network","additional.cfg","ID","$_ID",$_ITOKEN);
		if(_ARRAY_NULL($_ITOKEN)) {
			_CLI_ECHO(_GETTEXT("No data available for Resource Id '%s'","$_sid"));
			return FALSE;
		}
		if($_param=="name") {
			$_name=$_args[2];
			$_oldname=$_ITOKEN['NAME'];
			if(!_NULL($_ITOKEN['NAME'])) {
				if($_name!=$_ITOKEN['NAME']) {
					if(!_INI_TOKEN_CHECK("network","eth.cfg","NAME","$_name") &&
						!_INI_TOKEN_CHECK("network","additional.cfg","NAME","$_name")) {
						_CLI_ECHO(_GETTEXT("Interface name '%s' already exist","$_name"));
						return FALSE;
					}
				}
			}
			$_DATA=array();
			$_DATA['NAME']=$_name;
			if(!_ARRAY_NULL($_DATA) && _INI_TOKEN_UPDATE("network","additional.cfg",$_ID,$_DATA)) {
				_CLI_ECHO(_GETTEXT("Configuration saved successfully"));
				if(!_NULL($_oldname)) {
					_INI_TOKEN_REMOVE($_oldname,$_name);
				}
				return TRUE;
			}
		} elseif($_param=="address") {
			$_ip=$_args[2];
			if(!_CHECK_IP($_ip)) {
				_CLI_ECHO(_GETTEXT("Invalid IP Address '%s'","$_ip"));
				return FALSE;
			}
			if(!_ARRAY_NULL($_ITOKEN) && !_NULL($_ITOKEN['ADDR'])) {
				if($_ip!=$_ITOKEN['ADDR']) {
					if(!_INI_TOKEN_CHECK("network","eth.cfg","ADDR","$_ip") &&
						!_INI_TOKEN_CHECK("network","additional.cfg","ADDR","$_ip")) {
						_CLI_ECHO(_GETTEXT("Interface address '%s' already exist","$_ip"));
						return FALSE;
					}
				}
			}
			if(_HOST_PING($_ip)) {
				if(!_CLI_YESNO(_GETTEXT("IP Address '%s' already in used. Continue this action? %s","$_ip","[yes/no]: "))) {
					return FALSE;
				}
			}
			$_DATA=array();
			$_DATA['ADDR']=$_ip;
			if(!_ARRAY_NULL($_DATA) && _INI_TOKEN_UPDATE("network","additional.cfg",$_ID,$_DATA)) {
				_CLI_ECHO(_GETTEXT("Configuration saved successfully"));
				return TRUE;
			}
		} elseif($_param=="netmask") {
			$_nmask=$_args[2];
			if(!_NULL($_ITOKEN['ADDR'])) {
				_IPCALC::IP($_RESULT,$_ITOKEN['ADDR'],$_nmask);
				$_DATA=array();
				$_DATA['MASK']=$_RESULT['netmask'];
				$_DATA['PREF']=$_RESULT['prefix'];
				$_DATA['INET']=$_RESULT['inet'];
				if(!_ARRAY_NULL($_DATA) && _INI_TOKEN_UPDATE("network","additional.cfg",$_ID,$_DATA)) {
					_CLI_ECHO(_GETTEXT("Configuration saved successfully"));
					return TRUE;
				}
			}
		} elseif($_param=="description") {
			$_DATA=array();
			$_DATA['NOTE']=$_args[2];
			if(!_ARRAY_NULL($_DATA) && _INI_TOKEN_UPDATE("network","additional.cfg",$_ID,$_DATA)) {
				_CLI_ECHO(_GETTEXT("Configuration saved successfully"));
				return TRUE;
			}
		} elseif($_param=="pname") {
			$_sid=$_args[2];
			$_xobjf=_OBJ_PATH."/iosh_interfaces_ip_print.obj";
			$_xobj=_FILE_ARRAY_GET($_objf);
			if(_ARRAY_NULL($_xobj) || _NULL($_xobj[$_sid])) {
				_CLI_ECHO(_GETTEXT("Resource Id '%s' not available.","$_sid"));
				_CLI_ECHO(_GETTEXT("Enter -> '%s' to view Resource Id.","ip print"));
				@unlink($_objf);
				return FALSE;
			}
			$_XID=$_xobj[$_sid];
			_INI_TOKEN_GET_BYPARAM("network","eth.cfg","ID","$_XID",$_NTOKEN);
			if(!_ARRAY_NULL($_NTOKEN) && !_NULL($_NTOKEN['NAME'])) {
				$_DATA=array();
				$_DATA['PNAME']=$_NTOKEN['NAME'];
				if(!_ARRAY_NULL($_DATA) && _INI_TOKEN_UPDATE("network","additional.cfg",$_ID,$_DATA)) {
					_CLI_ECHO(_GETTEXT("Configuration saved successfully"));
					return TRUE;
				}
			}
		} elseif($_param=="enable") {
			_STR_ONOFF($_enab,$_args[2]);
			$_DATA=array();
			$_DATA['STAT']=$_enab;
			if(!_ARRAY_NULL($_DATA) && _INI_TOKEN_UPDATE("network","additional.cfg",$_ID,$_DATA)) {
				_CLI_ECHO(_GETTEXT("Configuration saved successfully"));
				return TRUE;
			}
		}
	}
	return _CLI_DEFAULT_RETURN();
}

function ___CLI_INTERFACES_DELETE_VIP($_nums) {
	$_objf=_OBJ_PATH."/iosh_interfaces_vip_print.obj";
	$_obj=_FILE_ARRAY_GET($_objf);
	if(_ARRAY_NULL($_obj)) {
		_CLI_ECHO(_GETTEXT("No Resource Id available."));
		_CLI_ECHO(_GETTEXT("Enter -> '%s' to view Resource Id.","vip print"));
		@unlink($_objf);
		return FALSE;
	}
	if($_nums=='*' && _CLI_YESNO(_GETTEXT("This action will delete all %s.\nContinue this action? %s","additional interfaces","[yes/no]: "))==TRUE) {
		foreach($_obj as $_cnt => $_id) {
			if(_INI_TOKEN_DELETE("network","additional.cfg",$_id)) {
				unset($_obj[$_cnt]);
			}
		}
		if(_FILE_ARRAY_SAVE($_objf,$_obj)) {
			return TRUE;
		}
	} else {
		$_num_array=array();
		_CLI_MULTINUM($_nums,$_num_array);
		foreach($_num_array as $_no) {
			if(!_NULL($_obj[$_no])) {
				if(_CLI_YESNO(_GETTEXT("This action will delete additional interface Id '%s'.\nContinue this action? %s","$_no","[yes/no]: "))==TRUE) {
					if(_INI_TOKEN_DELETE("network","additional.cfg",$_obj[$_no])) {
						unset($_obj[$_no]);
					}
				}
			}
		}
		if(_FILE_ARRAY_SAVE($_objf,$_obj)) {
			return TRUE;
		}
	}
	return _CLI_DEFAULT_RETURN();
}
?>
