This file is symlink.def, from which is created symlink.c.
It implements the builtin "symlink" in Bash.

$PRODUCES symlink.c
/*
  modified from examples/loadables/ln.c
*/
#include <config.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include "posixstat.h"
#include "../shell.h"
#include "../builtins.h"
#include "../bashtypes.h"

$BUILTIN symlink
$FUNCTION symlink_builtin
$SHORT_DOC symlink oldpath newpath
perform as ln -sf
$END

static char *mkdirpath(char *dir, char *file) {
	int dlen, flen;
	char *ret;

	dlen=strlen(dir);
	flen=strlen(file);

	ret=xmalloc(2 + dlen + flen);

	strcpy(ret, dir);
	if(ret[dlen - 1] != '/') ret[dlen++]='/';
	strcpy(ret + dlen, file);
	return ret;
}

static int dosymlink(char *src, char *dst) {
	struct stat ssb, dsb;
	char *dst_path, *p;

	dst_path=0;
	if((stat(dst, &dsb) == 0) && S_ISDIR(dsb.st_mode)) {
		if((p=strrchr(src, '/')) == 0) {
			p=src;
		} else {
			p++;
		}
		dst_path=mkdirpath(dst, p);
		dst=dst_path;
	}

	if((lstat(dst, &dsb)==0) && unlink(dst) != 0) {
		FREE(dst_path);
		return(EXECUTION_FAILURE);
	}

	/* Perform the link. */
	if(symlink(src, dst) != 0) {
		FREE(dst_path);
		return(EXECUTION_FAILURE);
	}

	FREE(dst_path);
	return(EXECUTION_SUCCESS);
}

int symlink_builtin(WORD_LIST *list) {
	int rval;
	WORD_LIST *l;
	char *sdir;
	struct stat sb;

	if(list == 0) {
		builtin_usage();
		return(EX_USAGE);
	}
    	if(no_options(list)) return(EX_USAGE);

 	if(list->next == 0) return(dosymlink(list->word->word, "."));
	if(list->next->next == 0) return(dosymlink(list->word->word, list->next->word->word));
	for(l=list; l->next; l=l->next);
  	sdir=l->word->word;
	if(stat(sdir, &sb) < 0) {
		return(EXECUTION_FAILURE);
	}

	if(S_ISDIR(sb.st_mode) == 0) {
		builtin_usage();
		return(EX_USAGE);
	}

	for(rval=EXECUTION_SUCCESS; list != l; list=list->next) {
		rval += dosymlink(list->word->word, sdir);
	}
	return rval;
}



