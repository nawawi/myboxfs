This file is sleep.def, from which is created sleep.c.
It implements the builtin "sleep" in Bash.
sleep -- sleep for fractions of a second

$PRODUCES sleep.c
/*
  modified from examples/loadables/sleep.c
*/
#include <config.h>
#include "../bashtypes.h"
#include <sys/time.h>
#include <time.h>
#include <unistd.h>
#include <stdio.h>
#include <chartypes.h>

#include "../shell.h"
#include "../builtins.h"

#define RETURN(x) \
	do { \
		if (sp) *sp = sec; \
		if (usp) *usp = usec; \
		return (x); \
	} while (0)

#if defined (HAVE_TIMEVAL) && defined (HAVE_SELECT)
static int fsleep(long sec, long usec) {
	struct timeval tv;
	tv.tv_sec = sec;
	tv.tv_usec = usec;
	return select(0, (fd_set *)0, (fd_set *)0, (fd_set *)0, &tv);
}
#else /* !HAVE_TIMEVAL || !HAVE_SELECT */
static int fsleep(long sec, long usec) {
	if (usec >= 500000) sec++;
	return (sleep(sec));
}
#endif /* !HAVE_TIMEVAL || !HAVE_SELECT */

/*
 * An incredibly simplistic floating point converter.
 */
static int multiplier[7] = { 1, 100000, 10000, 1000, 100, 10, 1 };

static int convert(char *s, long *sp, long *usp) {
	int n;
	long sec, usec;
	char *p;
	sec = usec = 0;
#define DECIMAL	'.'
	for(p = s; p && *p; p++) {
		if(*p == DECIMAL) break;
		if(DIGIT(*p)==0) RETURN(0);
		sec = (sec * 10) + (*p - '0');
	}

	if(*p==0) RETURN(1);
	if(*p==DECIMAL) p++;

	for (n = 0; n < 6 && p[n]; n++) {
		if(DIGIT(p[n]) == 0) RETURN(0);
		usec = (usec * 10) + (p[n] - '0');
	}
	usec *= multiplier[n];
	if (n == 6 && p[6] >= '5' && p[6] <= '9') usec++;
	RETURN(1);
}

$BUILTIN sleep
$FUNCTION sleep_builtin
$SHORT_DOC sleep seconds[.fraction]
sleep suspends execution for a minimum of SECONDS[.FRACTION] seconds.
$END

int sleep_builtin(WORD_LIST *list) {
	long sec, usec;

	if(list==0) {
		builtin_usage();
		return(EX_USAGE);
	}

	if(*list->word->word == '-' || list->next) {
		builtin_usage();
		return(EX_USAGE);
	}

    	if(convert(list->word->word, &sec, &usec)) {
		fsleep(sec, usec);
		return(EXECUTION_SUCCESS);
    	}

	builtin_error("%s: bad sleep interval", list->word->word);
	return (EXECUTION_FAILURE);
}
