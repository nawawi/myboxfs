This file is remove.def, from which is created remove.c.
It implements the builtin "remove" in Bash.
remove - delete file and directories contents recursively

$PRODUCES remove.c
/* taken/modified from busybox-1.13.3 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>
#include <unistd.h>
#include <stdarg.h>
#include "../builtins.h"
#include "../shell.h"
#include "bashgetopt.h"

$BUILTIN remove
$FUNCTION remove_builtin
$SHORT_DOC remove [file/directory ...]
delete file and directories contents recursively
$END

#define DOT_OR_DOTDOT(s) ((s)[0] == '.' && (!(s)[1] || ((s)[1] == '.' && !(s)[2])))

static char *xasprintf(const char *format, ...) {
        va_list p;
        int r;
        char *string_ptr;
        va_start(p, format);
        r = vasprintf(&string_ptr, format, p);
        va_end(p);
        if(r < 0) {
		fprintf(stderr,"memory exhausted");
		exit(1);
	}
        return string_ptr;
}

static char *last_char_is(const char *s, int c) {
	if(s && *s) {
		size_t sz = strlen(s) - 1;
		s += sz;
		if((unsigned char)*s == c) return (char*)s;
	}
	return NULL;
}

static char *bb_get_last_path_component_nostrip(const char *path) {
	char *slash = strrchr(path, '/');
        if(!slash || (slash == path && !slash[1])) return (char*)path;
        return slash + 1;
}

static char *bb_get_last_path_component_strip(char *path) {
	char *slash = last_char_is(path, '/');
	if(slash) {
                while(*slash == '/' && slash != path) *slash-- = '\0';
	}
	return bb_get_last_path_component_nostrip(path);
}

static char *concat_path_file(const char *path, const char *filename) {
        char *lc;
        if(!path) path = "";
        lc=last_char_is(path, '/');
        while(*filename == '/') filename++;
        return xasprintf("%s%s%s", path, (lc==NULL ? "/" : ""), filename);
}

static char *concat_subpath_file(const char *path, const char *f) {
        if (f && DOT_OR_DOTDOT(f)) return NULL;
        return concat_path_file(path, f);
}

// 0=false, 1=true
static int remove_file(const char *path) {
	struct stat path_stat;
	if(lstat(path, &path_stat) < 0) return 0;
	if(S_ISDIR(path_stat.st_mode)) {
		DIR *dp;
		struct dirent *d;
		int status = 1;
		dp=opendir(path);
                if(dp==NULL) return 0;
		while((d=readdir(dp))!= NULL) {
                        char *new_path=concat_subpath_file(path, d->d_name);
			if(new_path==NULL) continue;
			if(remove_file(new_path)==0) status=0;
                        FREE(new_path);
		}
		if(closedir(dp) < 0) return 0;
		if(rmdir(path) < 0) return 0;
                return status;
        }
        if(unlink(path) < 0) return 0;
        return 1;
}

static int rm_main(int argc, char **argv) {
	int status=0;
	if (*argv != NULL) {
		do {
			const char *base = bb_get_last_path_component_strip(*argv);
			if(DOT_OR_DOTDOT(base)) {
				return 1;
			} else if(remove_file(*argv)) {
				continue;
			}
			status=1;
		} while (*++argv);
	}
	return status;
}


int remove_builtin(WORD_LIST *list) {
	char **v;
	int c, r;
	if(no_options(list)) return(EX_BADUSAGE);
	list=loptend;
	if(list==0) {
		builtin_usage();
		return(EX_USAGE);
	}
	v=make_builtin_argv(list, &c);
	r=rm_main(c, v);
	FREE(v);
	return r;
}
