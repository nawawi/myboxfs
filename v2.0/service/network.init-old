#!/bin/php -q
<?

include_once('clib.so');

putenv("PATH=/bin:/service/tools:/service/init");

if(!file_exists("/bin/ip") || !file_exists("/bin/route") || !file_exists("/bin/ifconfig") || !file_exists("/bin/vconfig") || !file_exists("/bin/arping")) {
	echo "ip,route,ifconfig,arping or vconfig binary not found or cannot execute\n";
	slog("INIT: ip,route,ifconfig,arping or vconfig binary not found or cannot execute");
	exit(1);
}

function update_arp($dev,$ip) {
	exec_quite("arping -q -A -c 1 -I $dev $ip");
        sleep(2);
	exec_quite("arping -q -U -c 1 -I $dev $ip");
	return 0;
}

function set_balancing($FA_WAN,$FA_FA) {
	if(($FA_WAN=='') && ($FA_FA=='')) return 1;
	list($gw,$gw_dev,$gw_ip,$gw_prefix)=preg_split("/\|/",$FA_WAN);
	list($fa,$fa_dev,$fa_ip,$fa_prefix)=preg_split("/\|/",$FA_FA);
	$WAN_GW="$gw";
	$WAN_NET="$gw_prefix";
	$WAN_IP="$gw_ip";
	$WAN_DEV="$gw_dev";
	$FA_GW="$fa";
	$FA_NET="$fa_prefix";
	$FA_IP="$fa_ip";
	$FA_DEV="$fa_dev";
	exec_quite("ip route del default");
	exec_quite("ip route flush table 200");
	exec_quite("ip route flush table 201");
	exec_quite("ip route flush table 222");
	exec_quite("ip rule add prio 50 table main");
	exec_quite("ip rule add prio 200 from $WAN_NET table 200");
	exec_quite("ip route add default via $WAN_GW dev $WAN_DEV src $WAN_IP proto static table 200");
	exec_quite("ip route append prohibit default table 200 metric 1 proto static");
	exec_quite("ip rule add prio 201 from $FA_NET table 201");
	exec_quite("ip route add default via $FA_GW dev $FA_DEV src $FA_IP proto static table 201");
	exec_quite("ip route append prohibit default table 201 metric 1 proto static");
	exec_quite("ip rule add prio 222 table 222");
	exec_quite("ip route add default table 222 proto static nexthop via $WAN_GW dev $WAN_DEV nexthop via $FA_GW dev $FA_DEV");
	return 0;
}

function set_vip($dev,$db_id) {
	if($dev=='') return 1;
	$result=db_query("select * from ipalias where dev='$dev' and onboot='1'",$db_id);
	if(db_num_rows($result)!=0) {
		while($row=db_fetch_array_assoc($result)) {
			$_pid=$row['pid'];
			$_ipaddrip=$row['ip'];
			$_ipaddrmask=$row['mask'];
			$devv="$dev:$_pid";
			if(isip_alive($devv,$_ipaddrip)==0) {
				exec_quite("ip addr flush dev $devv");
				if(exec_cmd("ifconfig $devv $_ipaddrip netmask $_ipaddrmask")==0) {
					echo "\t     (virtual) $devv $_ipaddrip/$_ipaddrmask\n";
				}
			}
		}
	}
	return 0;
}

function set_vlan($dev,$db_id) {
	if($dev=='') return 1;
	$result=db_query("select * from vlan where dev='$dev' and onboot='1'",$db_id);
	if(db_num_rows($result)!=0) {
		while($row=db_fetch_array_assoc($result)) {
			$_ipaddrid=$row['vid'];
			$_ipaddrip=$row['ip'];
			$_ipaddrmask=$row['mask'];
			$_flag=$row['flag'];
			$_ret=ipcalc($_ipaddrip,$_ipaddrmask);
			if(count($_ret)==0) {
				echo "\t     (vlan) Invalid $_ipaddrip/$_ipaddrmask !\n";
				continue;
			}
			$_ipaddrnetwork=$_ret['network'];
			$_ipaddrbcast=$_ret['broadcast'];
			$_ipaddrprefix=$_ret['prefix'];
			$devv="$dev.$_ipaddrid";
			if(exec_cmd("vconfig add $dev $_ipaddrid")==0) {
				if(exec_cmd("arping -q -c 2 -w 3 -D -I $devv $_ipaddrip")) {
					if(exec_cmd("ip link set $devv up")==0) {
						exec_quite("ip addr flush dev $devv");
						if(exec_cmd("ip addr add $_ipaddrip/$_ipaddrprefix brd $_ipaddrbcast dev $devv label $devv")==0) {
							echo "\t     (vlan) $devv $_ipaddrip/$_ipaddrmask\n";
							exec_quite("vconfig set_flag $devv $_flag");
						} else {
							exec_quite("ip link set $devv down");
							exec_quite("ip addr flush dev $devv");
							exec_quite("vconfig rem $devv");
						}
					} else {
						exec_quite("vconfig rem $devv");
					}
				}
			}
		}
	}
	return 0;
}

function set_others_routing($db_id) {
	$t=1;
	$result=db_query("select * from route where stat='1'",$db_id);
	if(db_num_rows($result)!=0) {
		while($row=db_fetch_array_assoc($result)) {
			$_ip=$row['ip'];
			$_mask=$row['mask'];
			$_gateway=$row['gateway'];
			exec_quite("route del -net $_ip netmask $_mask gw $_gateway metric 1");
			if(exec_cmd("route add -net $_ip netmask $_mask gw $_gateway metric 1")==0) $t=0;
		}
	}
	return $t;
}

function network_start() {
	global $_DB_NAME, $_MYBOX_LICENSE;
	$ret=1;
	$_DEV=array();
	$_GW='';
	$_GW_STAT=0;
	$_GW_DEV='';
	$_FA='';
	$_FA_STAT=0;
	$_HOSTS=array();
	$_hostname='';
	$FA_WAN='';
	$FA_FA='';
	$db_id=db_connect($_DB_NAME);
	$result=db_query("select * from ipaddr where onboot='1'",$db_id);
	slog("INIT: Starting networking");
	if(db_num_rows($result)!=0) {
		while($row=db_fetch_array_assoc($result)) {
			$_ipaddrname=$row['name'];
			$_ipaddrdev=$row['dev'];
			$_ipaddrip=$row['ip'];
			$_ipaddrmask=$row['mask'];
			$_ret=ipcalc($_ipaddrip,$_ipaddrmask);
			if(count($_ret)==0) {
				echo "\t---- Invalid $_ipaddrip/$_ipaddrmask !\n";
				continue;
			}
			$_ipaddrnetwork=$_ret['network'];
			$_ipaddrbcast=$_ret['broadcast'];
			$_ipaddrprefix=$_ret['prefix'];
			$_DEV[$_ipaddrdev]="$_ipaddrip|$_ipaddrprefix|$_ipaddrmask|$_ipaddrbcast|$_ipaddrname|$_ipaddrnetwork";
		}
	}
	$res=db_query("select * from gateway",$db_id);
	if(db_num_rows($result)!=0) {
		while($row=db_fetch_array_assoc($res)) {
			$_type=$row['type'];
			$_ip=$row['ip'];
			$_stat=$row['stat'];
			if($_type=='default') {
				$_GW=$_ip;
				$_GW_STAT=$_stat;
			}
			if($_type=='failover') {
				$_FA=$_ip;
				$_FA_STAT=$_stat;
			}
		}
	}
	$res=db_query("select val from misc where name='hostname'",$db_id);
	if(db_num_rows($res)!=0) {
		$_hostname=db_fetch_single($res);
	}

	if(count($_DEV)==0) {
		echo "Network disabled\n";
		exit(1);
	}
	save_to_file("/etc/hosts.tmp","127.0.0.1\t\tlocalhost\n");
	echo "Bringing up network interfaces\n";
	foreach($_DEV as $dev => $val) {
		list($ip,$prefix,$mask,$brd,$name,$network)=preg_split("/\|/",$val);
		if(exec_cmd("ip link set $dev up")==0) {
			if(isip_alive($dev,$ip)==1) {
				echo "\t---- Error, some other host already uses address $ip.\n";
				slog("INIT: Error, some other host already uses address $ip");
			} else {
				exec_quite("ip addr flush dev $dev");
				if(exec_cmd("ip addr add $ip/$prefix brd $brd dev $dev scope global label $dev")==0) {
					echo "\t---- $dev $ip/$mask\n";
					// enable proxy arp
					//exec_cmd("echo \"1\" > /proc/sys/net/ipv4/conf/$dev/proxy_arp");
					update_arp($dev,$ip);
					$ret=0;
				} else {
					echo "\t---- $dev $ip/$mask already up!\n";
				}
				if($_MYBOX_LICENSE['nat']==1) set_vip($dev,$db_id);
				set_vlan($dev,$db_id);

				$_tmp="$ip\t\t$_hostname"."_$name";
				append_to_file("/etc/hosts.tmp","$_tmp\n");

				unset($_tmp);
				if($name=="WAN") $_GW_DEV=$dev;
				if($_FA_STAT==1) {
					if($name=="WAN") {
						$FA_WAN="$_GW|$dev|$ip|$network/$prefix";
					}
					if($name=="FOV") {
						$_FA_DEV=$dev;
						$FA_FA="$_FA|$dev|$ip|$network/$prefix";
					}
				}
			}
		} else {
			echo "\t---- Failed to bring up $dev.\n";
			slog("INIT: Failed to bring up $dev");
		}
		unset($ip,$prefix,$mask,$brd);
	}
	if(exec_cmd("ip link set lo up")==0) {
		if(exec_cmd("ip addr add 127.0.0.1/8 brd 127.255.255.255 dev lo scope host label lo")==0) {
			echo "\t---- loopback 127.0.0.1/255.0.0.0\n";
			exec_quite("route add -net 127.0.0.0 netmask 255.0.0.0 lo");
		}
	}

	if($_FA_STAT==1 && $FA_WAN!='' && $FA_FA!='' && $_GW_DEV!='') {
		if(set_balancing($FA_WAN,$FA_FA)==0) {
			echo "\t---- Load balancing activate via $_GW_DEV $_FA_DEV\n";
			slog("INIT: Load balancing activate via $_GW_DEV $_FA_DEV");
			@shell_exec("echo \"1\" >/proc/sys/net/ipv4/ip_forward");
			save_to_file("/var/sys/.load_fa","$_GW|$_GW_DEV|$_FA|$_FA_DEV\n");
		} else {
			echo "\t---- Load balancing not activate\n";
			slog("INIT: Load balancing not activate");
		}
	}
	if(($_FA_STAT==0 || $FA_WAN=='' || $FA_FA=='') && $_GW_DEV!='') {
		if(exec_cmd("ip route add default via $_GW dev $_GW_DEV metric 1")==0) {
			echo "\t---- Setting default gateway: $_GW via $_GW_DEV\n";
			slog("INIT: Setting default gateway: $_GW via $_GW_DEV");
			@shell_exec("echo \"1\" >/proc/sys/net/ipv4/ip_forward");
		} else {
			echo "\t---- Default gateway not set\n";
			slog("INIT: Default gateway not set");
		}
	}
	if(set_others_routing($db_id)==0) {
		echo "Applying static routing\n";
		slog("INIT: Applying static routing");
	}
	db_close($db_id);
	return $ret;
}

function network_stop() {
	$ret=1;
	echo "Shutting down network interfaces\n";
	if(is_dir("/proc/net/vlan")) {
		$d=dir("/proc/net/vlan");
        	while(($entry=$d->read())) {
                	if(is_file("/proc/net/vlan/$entry")) {
				if(strstr("eth",$entry)) {
					exec_quite("vconfig rem $entry");
					exec_quite("ip addr flush dev $entry");
					exec_quite("ip link set $entry down");
				}
               	 	}
        	}
        	$d->close();
	}
	exec("ifconfig |grep ^eth[0-9]: |awk '{print $1}'", $output, $ret);
   	while(list(,$vdev) = each($output)) {
		$dev=trim($vdev);
		exec_quite("ip addr flush dev $vdev");
		exec_quite("ip link set $vdev down");
	}
 	exec("ip addr ls |awk -F: '/eth.:/{print $2}'", $output, $ret);
   	while(list(,$dev) = each($output)) {
		$dev=trim($dev);
		exec_quite("ip addr flush dev $dev");
		if(exec_cmd("ip link set $dev down")==0) {
			echo "\t---- $dev\n";
		}
	}
	exec_quite("ip link set lo down");
	exec_quite("ip addr flush dev lo");
	exec_quite("ip route flush cache");
	exec_quite("ip route flush table main");
	exec_quite("ip route flush table 200");
	exec_quite("ip route flush table 201");
	exec_quite("ip route flush table 222");
	@shell_exec("echo \"0\" >/proc/sys/net/ipv4/ip_forward");
	@unlink("/var/sys/.load_fa");
	slog("INIT: Stopping networking");
	return $ret;
}

$ret=1;
$_app=basename($_SERVER["argv"][0]);
switch($_SERVER["argv"][1]) {
	case 'start':
		$ret=network_start();
		break;
	case 'stop':
		$ret=network_stop();
		break;
	case 'restart':
		$ret=network_stop();
		sleep(2);
		$ret=network_start();
		echo_query("ips-restart");
		break;
	default:
		echo "Usage: $_app [start/stop/restart\n";
		break;
}
flush();
exit($ret);
?>
