#!/bin/php -f
<?
if(isset($_ENV['GATEWAY_INTERFACE'])||isset($_ENV['SERVER_PROTOCOL'])) exit;

// mfs-query.exc - last update 14-Oct-2005
$_AWIE_CODE="ef3802a1fce98f3985e6a9a1f7c1a024";
include_once('clib.exl');
include_once('ftp.exl');
putenv("PATH=/bin:/service/tools:/service/init");

$cmd_array=array();
$cmd_array['https-restart']="$_INIT_DIR/https.init restart";
$cmd_array['https-cert']="$_INIT_DIR/https.init cert";
$cmd_array['https-config']="$_INIT_DIR/https.init config";
$cmd_array['https-restart-quiet']="$_INIT_DIR/https.init restart quiet";
$cmd_array['https-cert-quiet']="$_INIT_DIR/https.init cert quiet";
$cmd_array['https-config-quiet']="$_INIT_DIR/https.init config quiet";
//---
$cmd_array['ssh-restart']="$_INIT_DIR/ssh.init restart";
$cmd_array['ssh-passwd']="$_INIT_DIR/ssh.init passwd";
$cmd_array['ssh-restart-quiet']="$_INIT_DIR/ssh.init restart quiet";
$cmd_array['ssh-passwd-quiet']="$_INIT_DIR/ssh.init passwd quiet";
//---
$cmd_array['snmp-restart']="$_INIT_DIR/snmp.init restart";
$cmd_array['snmp-restart-quiet']="$_INIT_DIR/snmp.init restart quiet";
//---
$cmd_array['syslog-restart']="$_INIT_DIR/syslog.init restart";
$cmd_array['syslog-restart-quiet']="$_INIT_DIR/syslog.init restart quiet";
//---
$cmd_array['pptp-restart']="$_INIT_DIR/pptp.init restart";
$cmd_array['pptp-start']="$_INIT_DIR/pptp.init start";
$cmd_array['pptp-restart-quiet']="$_INIT_DIR/pptp.init restart quiet";
$cmd_array['pptp-start-quiet']="$_INIT_DIR/pptp.init start quiet";
//---
$cmd_array['network-restart']="$_INIT_DIR/network.init restart";
$cmd_array['network-restart-quiet']="$_INIT_DIR/network.init restart quiet";
//---
$cmd_array['ips-restart']="$_INIT_DIR/ips.init restart";
$cmd_array['ips-restart-quiet']="$_INIT_DIR/ips.init restart quiet";
$cmd_array['ips-reload-quiet']="$_INIT_DIR/ips.init reload quiet";
$cmd_array['ips-reload']="$_INIT_DIR/ips.init reload";
$cmd_array['ips-reload-quiet']="$_INIT_DIR/ips.init reload quiet";
$cmd_array['ips-config-reload-quiet']="$_INIT_DIR/ips.init config_reload quiet";
$cmd_array['ips-config-reload']="$_INIT_DIR/ips.init config_reload";
//---
$cmd_array['policy-restart']="$_INIT_DIR/policy.init restart";
$cmd_array['policy-restart-quiet']="$_INIT_DIR/policy.init restart quiet";
$cmd_array['policy-acl-reload-quiet']="$_INIT_DIR/policy.init acl_reload quiet";
$cmd_array['policy-acl-reload']="$_INIT_DIR/policy.init acl_reload";
$cmd_array['policy-blacklist-reload-quiet']="$_INIT_DIR/policy.init blacklist_reload quiet";
$cmd_array['policy-blacklist-reload']="$_INIT_DIR/policy.init blacklist_reload";
//---
$cmd_array['cron-restart']="$_INIT_DIR/cron.init restart";
$cmd_array['cron-restart-quiet']="$_INIT_DIR/cron.init restart quiet";
//---
$cmd_array['shaper-restart']="$_INIT_DIR/shaper.init restart";
$cmd_array['shaper-restart-quiet']="$_INIT_DIR/shaper.init restart quiet";
//---
$cmd_array['route-flush-cache']='/bin/ip route flush cache';
//---
$cmd_array['update-dnshost']="$_INIT_DIR/misc.init dnshost";
$cmd_array['update-dnshost-quiet']="$_INIT_DIR/misc.init dnshost quiet";
//---
$cmd_array['update-clock']="$_INIT_DIR/misc.init clock";
$cmd_array['update-clock-quiet']="$_INIT_DIR/misc.init clock quiet";
//---
$cmd_array['arp-flush-cache']='/service/tools/mfs-query.exc f';
//---
$cmd_array['dhcp-restart']="$_INIT_DIR/dhcp.init restart";
$cmd_array['dhcp-restart-quiet']="$_INIT_DIR/dhcp.init restart quiet";
//---
$cmd_array['mfs-reboot']='/bin/reboot';
$cmd_array['mfs-shutdown']='/bin/poweroff';
$cmd_array['cmd-stop']='cmd-stop';
//---
$cmd_array['ftp-restart']="$_INIT_DIR/ftp.init restart";
$cmd_array['ftp-passwd']="$_INIT_DIR/ftp.init passwd";
$cmd_array['ftp-restart-quiet']="$_INIT_DIR/ftp.init restart quiet";
$cmd_array['ftp-passwd-quiet']="$_INIT_DIR/ftp.init passwd quiet";
//---
$cmd_array['auth-ad-restart']="$_INIT_DIR/auth.init ad_restart";
$cmd_array['auth-ad-restart-quiet']="$_INIT_DIR/auth.init ad_restart quiet";
//---
$cmd_array['ddns-restart']="$_INIT_DIR/ddns.init restart";
$cmd_array['ddns-restart-quiet']="$_INIT_DIR/ddns.init restart quiet";

function read_query() {
	global $cmd_array;
	if(!file_exists("/var/sys/mfsque")) return;
	$buff=file("/var/sys/mfsque");
	@unlink("/var/sys/mfsque");
	if(count($buff)==0) return;
	if(count($buff)!=0) {
		foreach($buff as $line) {
			$line=trim($line);
			if($line=='') continue;
			$cmd=$cmd_array[$line];
			if($cmd!='') {
				if($line=='mfs-reboot') {
					sleep(5);
					mybox_exec_cmd("$cmd");
				} elseif($line=='mfs-shutdown') {
					sleep(5);
					mybox_exec_cmd("$cmd");
				} elseif($line=='policy-restart') {
					sleep(3);
					mybox_exec_cmd("$cmd");
				} elseif($line=='cmd-stop') {
					cmd_stop();
					sleep(1);	
				} else {
					mybox_exec_cmd("$cmd");
					sleep(1);
				}
			}
		}
	}
}

function cmd_stop() {
	if(file_exists("/var/sys/cmd_stop")) {
		$fi=file("/var/sys/cmd_stop");
		if(count($fi)!=0) {
			foreach($fi as $line) {
				$line=trim($line);
				mybox_killall("$line");
			}
		}
	}
	@unlink("/var/sys/cmd_stop");
}

function chk_idsblock() {
	$_IDS_BLOCK=array();
	if(file_exists("/var/sys/ipsblock")) {
		$_IDS_BLOCK=unserialize(mybox_fget_contents("/var/sys/ipsblock"));
		if(count($_IDS_BLOCK)==0) return 1;
		foreach($_IDS_BLOCK as $src => $keyb) {
			if(count($keyb)==0) continue;
        		foreach($keyb as $dst => $keyval) {
				$block=$keyval[0];
				$time=$keyval[1];
				$ipsb=$keyval[6];
				if(time() >= $time && $time!=0) {
					$dstl='';$dstm='';
					if($dst!='any') {
						$dstl="-d $dst";
						$dstm=" to $dst";
					}
					if($ipsb==1) mybox_exec_cmd("iptables -t nat -D ACL10011 -s $src $dstl -j DROP");
					mybox_exec_cmd("iptables -D ACL1001 -s $src $dstl -j DROP");
					mybox_slog("INFO","IPS, blocked time for intrusion from $src$dstm expired");
					unset($_IDS_BLOCK[$src][$dst]);
					if($_IDS_BLOCK[$src]==array()) unset($_IDS_BLOCK[$src]);
				}
       			}
		}
		file_put_contents("/var/sys/ipsblock",serialize($_IDS_BLOCK));
	}
	$_EMP=unserialize(mybox_fget_contents("/var/sys/payloaddir"));
	if(count($_EMP)!=0) {
		foreach($_EMP as $dir) {
			mybox_rmdir($dir,$dir);
		}
	}
	return 0;
}

function chk_timeoutcmd() {
	$_dirarray=mybox_dir2array("/tmp/timeout.*");
	if(count($_dirarray)!=0) {
		foreach($_dirarray as $file) {
			$file1=basename($file);
			list($name,$time)=preg_split("/\./",$file1);
			if(time() > $time) {
				$cmd=mybox_fget_contents($file);
				@mybox_killall("$cmd");
				@unlink($file);
			}
		}
	}
	return 1;
}

function query_check() {
	if(mybox_daemon()==0) {
		mybox_slog("ERROR","mfs-query.exc (query_check) running in background failed.");
		return 1;
	}
	while(1) {
		@chdir("/");
		read_query();
		sleep(1);
	}
	return 1;
}

function query_ips() {
	if(mybox_daemon()==0) {
		mybox_slog("ERROR","mfs-query.exc (query_ips) running in background failed.");
		return 1;
	}
	while(1) {
		@chdir("/");
		chk_idsblock();
		sleep(1);
	}
	exit;
}

function chk_policy_load() {
	if(!file_exists("/var/sys/policy_load")) return;
	$_time=mybox_fget_contents("/var/sys/policy_load");
	if(time() > $_time) {
		mybox_exec_cmd("$_INIT_DIR/policy.init restart quiet");
		@unlink("/var/sys/policy_load");
	}
}

function query_other() {
	if(mybox_daemon()==0) {
		mybox_slog("ERROR","mfs-query.exc (query_other) running in background failed.");
		return 1;
	}
	while(1) {
		@chdir("/");
		chk_policy_load();
		mybox_chk_pptpuser();
		chk_timeoutcmd();
		flush_app(1);
		mybox_chk_ftp_logout(2);
		sleep(1);
	}
	exit;
}

function delete_arp() {
	if(mybox_daemon()==0) {
		mybox_slog("ERROR","mfs-query.exc (delete_arp) running in background failed.");
		return 1;
	}
	mybox_arp_flush();
	exit;
}

function chk_ntp() {
	$ok=0;
	if(!file_exists("/var/sys/ntpserver")) exit;
	$sv=mybox_fget_contents("/var/sys/ntpserver");
	$sv="$sv ";
	$server='';
	$slv=preg_split("/\s+/",$sv);
	if(count($slv)!=0) {
		foreach($slv as $slx) {
			$slx=trim($slx);
			if($slx=='') continue;
			if(preg_match("/(\d+\.\d+\.\d+\.\d+)/",$slx) && !mybox_check_ipv4($slx)) {
				mybox_slog("ERROR","ntp query, invalid address $slx.");
				continue;
			}
			if(!preg_match("/(\d+\.\d+\.\d+\.\d+)/",$slx) && !mybox_isdomainresolves($slx)) {
				mybox_slog("ERROR","ntp query, cannot resolve host $slx.");
				continue;
			}

			$server .="$slx ";
		}
	}
	if(mybox_daemon()==0) {
		mybox_slog("ERROR","mfs-query.exc (chk_ntp) running in background failed.");
		return 1;
	}
	if(mybox_exec_cmd("ntpdate $server")==0) {
		mybox_exec_cmd("hwclock -w");
	}
	exit;
}

function flush_app($s=0) {
	global $_INIT_DIR;
	if($s==1) {
		if(file_exists("/var/sys/chkprog_wait")) {
			$tp=mybox_fget_contents("/var/sys/chkprog_wait");
			$prev=time() - 86400;
			if($prev >= $tp) @unlink("/var/sys/chkprog_wait");
		}
		return 1;
	} else {
		if(mybox_daemon()==0) {
			mybox_slog("ERROR","mfs-query.exc (flush_app) running in background failed.");
			return 1;
		}
		$time=time();
		mybox_save_to_file("/var/sys/chkprog_wait","$time");

		$_PROG=array();
		$_PROG[]="syslog.init";
		$_PROG[]="https.init";
		$_PROG[]="ips.init";
		$_PROG[]="cron.init";
		$_PROG[]="ssh.init";
		$_PROG[]="snmp.init";
		$_PROG[]="ftp.init";

		if(count($_PROG)!=0) {
			foreach($_PROG as $prog) {
				if(file_exists("$_INIT_DIR/$prog")) mybox_exec_cmd("$_INIT_DIR/$prog restart quiet");
			}
		}
		sleep(1);
		@unlink("/var/sys/chkprog_wait");
		exit(1);
	}
	return 1;
}

$_app=basename($_SERVER["argv"][0]);
$_opt=basename($_SERVER["argv"][2]);
$_quiet=1;
if($_opt=="debug") $_quiet=0;
switch($_SERVER["argv"][1]) {
	case 'q':
		$ret=query_check();
		break;
	case 'i':
		$ret=query_ips();
		break;
	case 'o':
		$ret=query_other();
		break;
	case 'f':
		$ret=delete_arp();
		break;
	case 'n':
		chk_ntp();
		break;
	case 'l':
		mybox_compress_log();
		break;
	case 'u':
		if(mybox_license('AUP')==1) mybox_auto_update($_quiet);
		break;
	case 'x':
		flush_app();
		break;
	case 'p':
		mybox_purge_log();
		break;
	default:
		echo "Usage: $_app [q:i:o:f:n:l:c:u:x]\n";
		echo "------ q: check query command\n";
		echo "------ i: check query ips\n";
		echo "------ o: check query other\n";
		echo "------ f: flush ARP cache\n";
		echo "------ n: check NTP time\n";
		echo "------ l: compress logs\n";
		echo "------ p: purge logs\n";
		if(mybox_license('AUP')==1) {
			echo "------ u: auto update\n";
		}
		echo "------ x: flush application\n";
		break;
}
exit(0);
?>