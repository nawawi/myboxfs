#!/bin/php -f
<?
if(isset($_ENV['GATEWAY_INTERFACE'])||isset($_ENV['SERVER_PROTOCOL'])) exit;
// mfs-watch.exc - last update 14-Oct-2005
$_AWIE_CODE="ef3802a1fce98f3985e6a9a1f7c1a024";
include_once('clib.exl');
putenv("PATH=/bin:/service/tools:/service/init");
$_CNT=0;
function mybox_watch_check_ipv4($ip) {
	// 0 = false; 1 = true;
	if(preg_match('/^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$/',$ip)) {
		if(!ereg('^0.',$ip)) {
			foreach(explode(".",$ip) as $octet ){
 				if($octet >= 255){ 
					return 0;
				}
			}
		}
		return 1;
	}
	return 0;
}

function mybox_watch_clean() {
	exec("ip route show",$list,$ret);
	if(count($list)!=0) {
		foreach($list as $line) {
			if(preg_match("/^prohibit\s+(\S+)/",$line,$mm)) {
				mybox_exec_cmd("ip route del prohibit {$mm[1]}");
			}
		}
	}
}

function mybox_watch_proc_rule($list_array) {
	if(count($list_array)==0) return array();
	$list_ret=array();
	mybox_watch_clean();
	foreach($list_array as $ip) {
		mybox_exec_cmd("ip route add prohibit $ip");
	}
}

function mybox_watch_if_mine($ip) {
	if(file_exists("/var/sys/chk_bawal_eth")) {
		$list=unserialize(mybox_fget_contents("/var/sys/chk_bawal_eth"));
		if(count($list)==0) return 0;
		foreach($list as $buff) {
			list($me,$mask,$net)=preg_split("/\|/",$buff);
			if($ip=="$me") continue; // its me
			$ret=mybox_ipcalc($ip,$mask);
			if($ret['network']=="$net") return 1;
		}
	}
	return 0;
}
function mybox_watch_user() {
	global $_CNT;
	if(!file_exists("/var/sys/chk_bawal")) exit;
	$_UL=mybox_fget_contents("/var/sys/chk_bawal");
	if($_UL==0 || $_UL=='') exit;
	// clean
	if($_CNT > 12) {
		mybox_watch_clean();
		$_CNT=0;
	}
	$_LUSER=array();
	exec("ip route show cache",$line,$ret);
	if(count($line)!=0) {
		foreach($line as $ln) {
			$ln=trim($ln);
			if(preg_match("/^cache/",$ln)) continue;
			if(preg_match("/^local/",$ln)) continue;
			if(preg_match("/^broadcast/",$ln)) continue;
			if(preg_match("/^(\d+\.\d+\.\d+\.\d+)\s+from\s+(\d+\.\d+\.\d+\.\d+)/",$ln,$mm)) {
				$ip1=$mm[1];$ip2=$mm[2];
				if(mybox_watch_if_mine($ip1) && mybox_watch_check_ipv4($ip1)) $_LUSER[]=$ip1;
				if(mybox_watch_if_mine($ip2) && mybox_watch_check_ipv4($ip2)) $_LUSER[]=$ip2;
			}
		}
	}
	if(count($_LUSER) >= $_UL) mybox_watch_proc_rule($_LUSER);
}

function mybox_watch_daemon() {
	global $_CNT;
	$pid=pcntl_fork();
	if($pid==-1) {
		mybox_slog("ERROR","function mybox_watch_daemon() fork failed.");
		return 1;
    	} else if($pid) {
		exit;
	} else {
		while(1) {
			@chdir("/");
			mybox_watch_user();
			sleep(5);
			$_CNT++;
		}
		exit;
	}
	return 1;
}
mybox_watch_daemon();
exit(0);
?>