<?
if($_AWIE_CODE!="ef3802a1fce98f3985e6a9a1f7c1a024") exit("\n\n<---[ closed. not parent ]--->\n\n");

function mybox_binnmtowm($binin){
	$binin=rtrim($binin, "0");
	if(!ereg("0",$binin) ){
		return str_pad(str_replace("1","0",$binin), 32, "1");
	} else {
		return "1010101010101010101010101010101010101010";
	}
}

function mybox_bintocdr($binin){
	return strlen(rtrim($binin,"0"));
}

function mybox_bintodq($binin) {
	if ($binin=="N/A") return $binin;
	$binin=explode(".", chunk_split($binin,8,"."));
	for ($i=0; $i<4 ; $i++) {
		$dq[$i]=bindec($binin[$i]);
	}
        return implode(".",$dq) ;
}

function mybox_binwmtonm($binin){
	$binin=rtrim($binin, "1");
	if (!ereg("1",$binin)){
		return str_pad(str_replace("0","1",$binin), 32, "0");
	} else return "1010101010101010101010101010101010101010";
}

function mybox_cdrtobin($cdrin){
	return str_pad(str_pad("", $cdrin, "1"), 32, "0");
}

function mybox_dqtobin($dqin) {
        $dq = explode(".",$dqin);
        for ($i=0; $i<4 ; $i++) {
           $bin[$i]=str_pad(decbin($dq[$i]), 8, "0", STR_PAD_LEFT);
        }
        return implode("",$bin);
}

function mybox_check_ipv4($ip) {
	// 0 = false; 1 = true;
	if(preg_match('/^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$/',$ip)) {
		if(!ereg('^0.',$ip)) {
			foreach(explode(".",$ip) as $octet ){
 				if($octet > 255){ 
					return 0;
				}
			}
		}
		return 1;
	}
	return 0;
}

// 23-Nov-2006
function mybox_check_mac($mac) {
	if(strlen($mac) > 17) return false;
	return preg_match("/^([0-9a-fA-F]{0,2})[-: ]?([0-9a-fA-F]{0,2})[-: ]?([0-9a-fA-F]{0,2})[-: ]?([0-9a-fA-F]{0,2})[-: ]?([0-9a-fA-F]{0,2})[-: ]?([0-9a-fA-F]{0,2})[-: ]?([0-9a-fA-F]{0,2})$/",$mac);
}

function mybox_ipcalc($ip,$nmask='255.255.255.0') {
	if(!mybox_check_ipv4($ip)) return array();
	$dq_host=$ip;
	$ret=array();
	if(preg_match("/^[0-9]{1,2}$/",$nmask)) {
		if(!($nmask >= 0 && $nmask <= 32)) return $ret;
		$bin_nmask=mybox_cdrtobin($nmask);
		$bin_wmask=mybox_binnmtowm($nmask);
		$_prefix=$nmask;
	} elseif(preg_match('/^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$/',$nmask)) {
		$bin_nmask=mybox_dqtobin($nmask);
		$bin_wmask=mybox_binnmtowm($bin_nmask);
		if(ereg("0",rtrim($bin_nmask, "0"))) {
			$bin_wmask=mybox_dqtobin($nmask);
			$bin_nmask=mybox_binwmtonm($bin_wmask);
			if(ereg("0",rtrim($bin_nmask, "0"))) {
				return $ret;
			}
		}
		$cdr_nmask=mybox_bintocdr($bin_nmask);
		$_prefix=$cdr_nmask;
	} else {
		return $ret;
	}
	$bin_host=mybox_dqtobin($dq_host);
	$bin_bcast=(str_pad(substr($bin_host,0,$cdr_nmask),32,1));
	$bin_net=(str_pad(substr($bin_host,0,$cdr_nmask),32,0));
	$bin_first=(str_pad(substr($bin_net,0,31),32,1));
	$bin_last=(str_pad(substr($bin_bcast,0,31),32,0));
	$host_total=(bindec(str_pad("",(32-$cdr_nmask),1)) - 1);
	if($host_total <= 0) {
		$bin_first="N/A" ; $bin_last="N/A" ; $host_total="N/A";
		if ($bin_net === $bin_bcast) $bin_bcast="N/A";
	}
	if(ereg('^(00001010)|(101011000001)|(1100000010101000)',$bin_net)) {
		$_type='Private';
	} else {
		$_type='Public';
	}
	$_ipaddr=$dq_host;
	$_netmask=mybox_bintodq($bin_nmask);
	$_wildcard=mybox_bintodq($bin_wmask);
	$_network=mybox_bintodq($bin_net);
	$_broadcast=mybox_bintodq($bin_bcast);
	$_hostmin=mybox_bintodq($bin_first);
	$_hostmax=mybox_bintodq($bin_last);
	$_hostnet=$host_total;
	
	$ret['ip']=$_ipaddr;
	$ret['netmask']=$_netmask;
	$ret['wildcard']=$_wildcard;
	$ret['network']=$_network;
	$ret['broadcast']=$_broadcast;
	$ret['hostmin']=$_hostmin;
	$ret['hostmax']=$_hostmax;
	$ret['total']=$_hostnet;
	$ret['prefix']=$_prefix;
	$ret['type']=$_type;
	return $ret;
}

// 0 = false 1 = true
function mybox_is_samenet($_IDS_NET,$src,$dst) {
	$_srcnet=0;$_dstnet=1;
	$found=0;
	foreach($_IDS_NET as $list) {
		$_ret=array();
		list($ip,$prefix,$net,$mask)=preg_split("/\|/",$list);
		$_ret=mybox_ipcalc($src,$mask);
		if(count($_ret)!=0) $_srcnet=$_ret['network'];
		$_ret=mybox_ipcalc($dst,$mask);
		if(count($_ret)!=0) $_dstnet=$_ret['network'];
		if($_srcnet==$_dstnet) $found=1;
	}
	return $found;
}
// 0 = false 1 = true
function mybox_is_inbound($_IDS_NET,$src) {
	$_srcnet=0;$_dstnet=1;
	$found=1;
	foreach($_IDS_NET as $list) {
		$_ret=array();
		list($ip,$prefix,$net,$mask)=preg_split("/\|/",$list);
		$_ret=mybox_ipcalc($src,$mask);
		if(count($_ret)!=0) $_srcnet=$_ret['network'];
		if($_srcnet==$net) $found=0;
	}
	return $found;
}


// 0 = false 1 = true
function mybox_is_attackme($_IDS_NET,$src,$dst) {
	$_srcnet=0;$_dstnet=1;
	$found=0;
	foreach($_IDS_NET as $list) {
		list($ip,$prefix,$net)=preg_split("/\|/",$list);
		if($dst==$ip) $found=1;
	}
	return $found;
}

function mybox_isip_alive($dev,$ip) {
	//exec("arping -c 2 -w 3 -D -I $dev $ip",$out,$ret);
	exec("arping -f -c 2 -w 3 -D -i $dev $ip",$out,$ret);
	foreach($out as $list) {
        	if(preg_match("/Received\s(\d+)/",$list,$mm)) {
                	if($mm[1]==0) return 0;
        	}
	}
	return 1;
}

function mybox_isip_exists($ip) {
	exec("arping -f -c 1 -w 1 -D $ip",$out,$ret);
	foreach($out as $list) {
        	if(preg_match("/Received\s(\d+)/",$list,$mm)) {
                	if($mm[1]==0) return 0;
        	}
	}
	return 1;
}

function mybox_chkconnect($proto,$ip,$port,$timeout) {
        $ret=1;
        $fp=@fsockopen("$proto://$ip", $port, $errno, $errstr, $timeout);
       	if(!$fp) $ret=0;
        @fclose($fp);
        return $ret;
}

function mybox_set_smb_acl($db_id,$ip) {
	$result=mybox_db_query("select ip,mask,dev from ipaddr",$db_id);
	if(mybox_db_num_rows($result)!=0) {
		while($row=mybox_db_fetch_assoc($result)) {
			$_ip=$row['ip'];
			$_mask=$row['mask'];
			$_dev=$row['dev'];
			$_ret=mybox_ipcalc($_ip,$_mask);
			$_net1=$_ret['network'];
			$_ret=mybox_ipcalc($ip,$_mask);
			$_net2=$_ret['network'];
			if($_net1==$_net2) return "$_dev";
			unset($_net1,$_net2,$_ret,$_ip,$_mask,$_dev);
		}
	}
	return null;
}

function mybox_chk_valid_policy_input($db_id) {
	$notok=0;
	$result=mybox_db_query("select ip,onboot from ipalias where onboot='1'",$db_id);
	if(mybox_db_num_rows($result)!=0) {
		while($row=mybox_db_fetch_assoc($result)) {
			$_ip=$row['ip'];
			$result1=mybox_db_query("select dst,stat from policy_inbound where stat='1' and dst='$_ip'",$db_id);
			if(mybox_db_num_rows($result1)!=0) {
				while($row=mybox_db_fetch_assoc($result1)) {
					$_dst=$row['dst'];
					$result2=mybox_db_query("select dst,stat from policy_dnat where dst='$_dst' and stat='1'",$db_id);
					if(mybox_db_num_rows($result2)==0) {
						mybox_db_query("update policy_inbound set stat='0' where dst='$_dst'",$db_id);
						mybox_slog("WARNING","Virtual IP not mapping with valid IP address");
						$notok=1;
					}
				}	
			}
		}
	}
	return $notok;
}

function mybox_get_gw_devname($db_id,$ip) {
	$result=mybox_db_query("select * from ipaddr",$db_id);
	if(mybox_db_num_rows($result)!=0) {
		while($row=mybox_db_fetch_assoc($result)) {
			$_srcnet='';$_dstnet='';
			$_ret=array();
			$_ipaddrname=$row['name'];
			$_ipaddrdev=$row['dev'];
			$_ipaddrip=$row['ip'];
			$_ipaddrmask=$row['mask'];
			$_ret=mybox_ipcalc($_ipaddrip,$_ipaddrmask);
			if(count($_ret)!=0) $_srcnet=$_ret['network'];
			$_ret=mybox_ipcalc($ip,$_ipaddrmask);
			if(count($_ret)!=0) $_dstnet=$_ret['network'];
			if($_srcnet==$_dstnet) return $_ipaddrname;
		}
	}
	return 'NULL';
}
function mybox_get_gw_device($db_id,$name) {
	$result=mybox_db_query("select * from ipaddr where name='$name' and onboot='1'",$db_id);
	if(mybox_db_num_rows($result)!=0) {
		while($row=mybox_db_fetch_assoc($result)) {
			$_ret=array();
			$_ipaddrip=$row['ip'];
			$_ipaddrdev=$row['dev'];
			$_ipaddrmask=$row['mask'];
			$_ret=mybox_ipcalc($_ipaddrip,$_ipaddrmask);
			if(count($_ret)!=0) {
				$_net=$_ret['network'];
				$_pref=$_ret['prefix'];
				return "$_ipaddrdev|$_ipaddrip|$_net/$_pref";
			}
		}
	}
	return '';
}
function mybox_get_gw($db_id,$id) {
	$result=mybox_db_query("select * from gateway where id='$id' and stat='1'",$db_id);
	if(mybox_db_num_rows($result)!=0) {
		while($row=mybox_db_fetch_assoc($result)) {
			$_ip=$row['ip'];
			$_devname=$row['dev'];
			$_dev=mybox_get_gw_device($db_id,$_devname);
			if($_dev!='') {
				return "$_ip|$_dev";
			}
		}
	}
	return '';
}

function mybox_list_devname($db_id) {
	$_dd=array();
	$result=mybox_db_query("select name,dev from ipaddr",$db_id);
	if(mybox_db_num_rows($result)!=0) {
		while($row=mybox_db_fetch_assoc($result)) {
			$_name=$row['name'];
			$_dev=$row['dev'];
			$_dd[$_dev]=$_name;
		}
	}
	return $_dd;
}
// 19/09/2006
function mybox_list_namedev($db_id) {
	$_dd=array();
	$result=mybox_db_query("select name,dev from ipaddr",$db_id);
	if(mybox_db_num_rows($result)!=0) {
		while($row=mybox_db_fetch_assoc($result)) {
			$_name=$row['name'];
			$_dev=$row['dev'];
			$_dd[$_name]=$_dev;
		}
	}
	return $_dd;
}

function mybox_search_devname($table,$db_id) {
	$_ret='';
	$result=mybox_db_query("select dev from $table",$db_id);
	if(mybox_db_num_rows($result)!=0) {
		while($row=mybox_db_fetch_assoc($result)) {
			$_dev=$row['dev'];
			$_ret="$_dev";
		}
	}
	return $_ret;
}
// 27/05/2006: dnet arp show
// update: 20/11/2006: arp -n
function mybox_arp_flush() {
	if($fi=popen("arp -n","r")) {
		while($buff=fgets($fi,1024)) {
			$buff=trim($buff);
			if($buff=='') continue;
			if(preg_match("/^Address/",$buff)) continue;
			if(preg_match("/\(incomplete\)/",$buff)) continue;
			list($addr,$hw)=preg_split("/\s+/",$buff);
			$addr=trim($addr);
			if($addr!='') {
				mybox_exec_cmd("arp -d $addr");
			}
			unset($addr,$hw);
		}
		pclose($fi);
		@mybox_staticarp();
	}
}
// 03/06/2006
function mybox_if_dev_up_array() {
	$_int=array();
	$ipconfig=mybox_get_ipconfig_cache();
	if(count($ipconfig)!=0) {
		foreach($ipconfig as $eth => $val) {
			if(!preg_match("/^eth(\d+)$/",$eth)) continue;
			$dev1=trim($eth);
			$_int[$dev1]=1;
		}
		return $_int;
	}
}

// 19/09/2006
function mybox_if_vip_up_array() {
	$_int=array();
	$ipconfig=mybox_get_ipconfig_cache();
	if(count($ipconfig)!=0) {
		foreach($ipconfig as $eth => $val) {
			if(!preg_match("/^eth(\d+)\:(\d+)$/",$eth)) continue;
			$dev=trim($eth);
			$_int[$dev]=1;
		}
		return $_int;
	}
}

// 28/09/2006
function mybox_if_vlan_up_array() {
	$_int=array();
	$ipconfig=mybox_get_ipconfig_cache();
	if(count($ipconfig)!=0) {
		foreach($ipconfig as $eth => $val) {
			if(!preg_match("/^eth(\d+)\.(\d+)$/",$eth)) continue;
			$dev=trim($eth);
			$_int[$dev]=1;
		}
		return $_int;
	}
}

// 14/11/2006
// update: 20/11/2006
function mybox_get_arp_ip_mac($dev,$ip) {
        exec("arping -f -c 2 -w 3 -i $dev $ip",$out,$ret);
        $mac='';
        if($ret==0) {
                if(count($out)!=0) {
                        foreach($out as $lx) {
                                $lx=trim($lx);
                                if(preg_match("/\s+$ip\s+\[(\S+\:\S+\:\S+\:\S+\:\S+\:\S+)\]/",$lx,$mm)) {
					if(mybox_check_mac($mm[1])) $mac=$mm[1];
                                        break;
                                }
                        }
                }
        }
        return $mac;
}
// 14/11/2006
function mybox_get_ipconfig_cache() {
	$ret=1;$_mac=array();
	if(!file_exists("/var/sys/ipconfig.cache")) @shell_exec("ifconfig > /var/sys/ipconfig.cache");
	if(file_exists("/var/sys/ipconfig.cache")) {
		$out=file("/var/sys/ipconfig.cache");
		$ret=0;
	} else {
		exec("ifconfig",$out,$ret);
	}
	if($ret==0) {
		if(count($out)!=0) {
			foreach($out as $lx) {
				if(preg_match("/^(eth\d+)\s+Link\s+encap\:Ethernet\s+HWaddr\s+(\S+\:\S+\:\S+\:\S+\:\S+\:\S+)/",$lx,$mm)) {
					$tag=$mm[1];
					if($_mac[$tag]=='') $_mac[$tag] .="{$mm[2]},";
				} elseif(preg_match("/^(eth\d+\:\d+)\s+Link\s+encap\:Ethernet\s+HWaddr\s+(\S+\:\S+\:\S+\:\S+\:\S+\:\S+)/",$lx,$mm)) {
					$tag=$mm[1];
					if($_mac[$tag]=='') $_mac[$tag] .="{$mm[2]},";
				} elseif(preg_match("/^(eth\d+\.\d+)\s+Link\s+encap\:Ethernet\s+HWaddr\s+(\S+\:\S+\:\S+\:\S+\:\S+\:\S+)/",$lx,$mm)) {
					$tag=$mm[1];
					if($_mac[$tag]=='') $_mac[$tag] .="{$mm[2]},";
				} else if(preg_match("/\s+inet\s+addr\:(\d+\.\d+\.\d+\.\d+)\s+Bcast\:(\d+\.\d+\.\d+\.\d+)\s+Mask\:(\d+\.\d+\.\d+\.\d+)/",$lx,$mm1)) {
					$_mac[$tag] .="{$mm1[1]},{$mm1[2]},{$mm1[3]}";
				} else {
					continue;
				}
			}
		}
		return $_mac;
	}
	return $_mac;
}

// 20/11/2006
function mybox_get_routen_cache() {
	$ret=1;$_route=array();
	if(!file_exists("/var/sys/routen.cache")) @shell_exec("route -n > /var/sys/routen.cache");
	if(file_exists("/var/sys/routen.cache")) {
		$out=file("/var/sys/routen.cache");
		$ret=0;
	} else {
		exec("route -n",$out,$ret);
	}
	if($ret==0) {
		if(count($out)!=0) {
			foreach($out as $lx) {
				$lx=trim($lx);
				if($lx=='') continue;
				if(preg_match("/^(Kernel|Destination)/",$lx)) continue;
				list($destination,$gateway,$genmask,$flags,$metric,$ref,$use,$iface)=preg_split('/\s+/',$lx);
				$_route[]="$flags|$gateway|$iface|$destination|$genmask|$metric|$ref|$use";
			}
		}
		return $_route;
	}
	return $_route;
}

function mybox_arptables($cmd) {
	mybox_exec_cmd("arptables $cmd");
}

function mybox_arptables_stop() {
	mybox_arptables("-F");
	mybox_arptables("-X");
	mybox_arptables("-Z");
}

function mybox_arptables_start() {
	mybox_arptables_stop();
	mybox_arptables("-N ACL1002-arp");
	mybox_arptables("-A INPUT -j ACL1002-arp");
	mybox_arptables("-A OUTPUT -j ACL1002-arp");
	mybox_arptables("-A FORWARD -j ACL1002-arp");
}
function mybox_staticarp() {
	global $_DB_NAME;
	// re-flush static ARP cache
	if($fi=popen("arp -n","r")) {
		while($buff=fgets($fi,1024)) {
			$buff=trim($buff);
			if($buff=='') continue;
			if(preg_match("/^Address/",$buff)) continue;
			if(preg_match("/\(incomplete\)/",$buff)) continue;
			list($addr,$hw,$mac,$flag,$dev)=preg_split("/\s+/",$buff);
			$addr=trim($addr);
			if($addr!='' && $flag=="CM") {
				mybox_exec_cmd("arp -d $addr");
			}
			unset($addr,$hw,$mac,$flag,$dev);
		}
		pclose($fi);
	}
	mybox_exec_cmd("iptables -F ACL1002-arp");
	mybox_exec_cmd("iptables -Z ACL1002-arp");
	mybox_arptables_start();

        $ipconfig=mybox_get_ipconfig_cache();
        if(count($ipconfig)!=0) {
                foreach($ipconfig as $eth => $val) {
			if(!preg_match("/^eth(\d+)$/",$eth)) continue;
                        list($mac,$ip,$bcast,$mask)=preg_split("/,/",$val);
                        if($ip!='' && $mac!='' && mybox_check_mac($mac)) {
				mybox_exec_cmd("arp -s $ip $mac -i $eth");
				mybox_exec_cmd("iptables -A ACL1002-arp -s ! $ip -m mac --mac-source $mac -j DROP");
				mybox_arptables("-A ACL1002-arp -s ! $ip --source-mac $mac -j DROP");
			}
                }
        } 
	$routen=mybox_get_routen_cache();
	if(count($routen)!=0) {
		foreach($routen as $lx) {
			if($lx=='') continue;
			$_mac='';
			list($flags,$gateway,$iface,$destination,$genmask,$metric,$ref,$use)=preg_split('/\|/',$lx);
			if($flags=="UG") {
				$_mac=mybox_get_arp_ip_mac($iface,$gateway);
				if($_mac!='' && mybox_check_mac($_mac)) {
					mybox_exec_cmd("arp -s $gateway $_mac -i $iface");
					mybox_exec_cmd("iptables -A ACL1002-arp -s ! $gateway -m mac --mac-source $_mac -j DROP");
					mybox_arptables("-A ACL1002-arp -s ! $gateway --source-mac $_mac -j DROP");
				}
			}
		}
	}
	if(file_exists("/var/sys/dhcp.cache")) {
		$buff=file("/var/sys/dhcp.cache");
		if(count($buff)!=0) {
			foreach($buff as $ln) {
				$ln=trim($ln);
				if($ln=='') continue;
				list($ip,$mac,$dev)=preg_split("/\|/",$ln);
				if($ip!='' && $mac!='' && $dev!='' && mybox_check_mac($mac)) {
					mybox_exec_cmd("arp -s $ip $mac -i $dev");
					mybox_exec_cmd("iptables -A ACL1002-arp -s ! $ip -m mac --mac-source $mac -j DROP");
					mybox_arptables("-A ACL1002-arp -s ! $ip --source-mac $mac -j DROP");
				}
			}
		}
	}
	$db_id=mybox_db_connect($_DB_NAME);
	$result=mybox_db_query("select ip,mac,stat from static_arp where stat='1'",$db_id);
	if(@mybox_db_num_rows($result)!=0) {
		while($row=mybox_db_fetch_assoc($result)) {
			$_ip=$row['ip'];
			$_mac=strtoupper($row['mac']);
			if($_ip!='' && $_mac!='' && mybox_check_mac($_mac)) {
				mybox_exec_cmd("arp -s $_ip $_mac");
				mybox_exec_cmd("iptables -A ACL1002-arp -s ! $_ip -m mac --mac-source $_mac -j DROP");
				mybox_arptables("-A ACL1002-arp -s ! $_ip --source-mac $_mac -j DROP");
			}
		}
	}
}

// 29-Nov-2006
function mybox_get_dhcp_lease() {
	$leases=array();
	if($fp=@fopen("/var/state/dhcp/dhcpd.leases","r")) {
		$return=array();
		while($line=fgets($fp))	{
			$matches="";
			if(preg_match("/^\s*[\r|\n]/", $line, $matches[0]) ||
				preg_match("/^([^\"#]*)#.*$/", $line, $matches[1]) ||
				preg_match("/^([^\"]*)\/\/.*$/", $line, $matches[2]) ||
				preg_match("/\s*#(.*)/", $line, $matches[3]) ||
				preg_match("/\\\"\176/", $line, $matches[4]) ) {
				$line="";
				continue;
			}

			if(preg_match("/(.*)#(.*)/", $line, $matches)) $line=$matches[0];
			do {
				if(preg_match("/^\s*\"([^\"]*)\"(.*)$/", $line, $matches)) {
					$line=$matches[2];
					$return[]=array($matches[1], 0);
				} else if(preg_match("/^\s*([{};])(.*)$/", $line, $matches)) {
					$line=$matches[2];
					$return[]=array($matches[0], 1);
				} else if(preg_match("/^\s*([^{}; \t]+)(.*)$/", $line, $matches)) {
					$line=$matches[2];
					$return[]=array($matches[1], 0);
				} else {
					break;
				}
			} while($line);
			$lines++;
		}
		fclose($fp);
		$i=0;
		while($data=array_shift($return)) {
			if($data[0]=="next") $d=array_shift($return);
			if($data[0]=="lease") {
				$d=array_shift($return);
				$leases[$i]['ip']=$d[0];
			}
			if($data[0]=="client-hostname") {
				$d=array_shift($return);
				$leases[$i]['hostname']=$d[0];
			}
			if($data[0]=="hardware") {
				$d=array_shift($return);
				if($d[0]=="ethernet") {
					$d=array_shift($return);
					$leases[$i]['mac']=$d[0];
				}
			} else if($data[0]=="starts") {
				$d=array_shift($return);
				$d=array_shift($return);
				$leases[$i]['start']=$d[0];
				$d=array_shift($return);
				$leases[$i]['start'] .= " " . $d[0];
			} else if($data[0]=="ends") {
				$d=array_shift($return);
				$d=array_shift($return);
				$leases[$i]['end']=$d[0];
				$d=array_shift($return);
				$leases[$i]['end'] .= " " . $d[0];
			} else if($data[0]=="binding") {
				$d=array_shift($return);
				if($d[0]=="state") {
					$d=array_shift($return);
					$leases[$i]['act']=$d[0];
				}
			} else if(($data[0]=="}")&&($data[1]==1)) {
				$i++;
			}
		}
	}
	return array_reverse($leases);
}
?>
