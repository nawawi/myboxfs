--- php-5.1.6.ori/main/main.c	2006-08-11 05:49:56.000000000 +0800
+++ php-5.1.6/main/main.c	2006-10-30 20:02:44.000000000 +0800
@@ -300,6 +300,8 @@
 	STD_PHP_INI_ENTRY("upload_max_filesize",	"2M",		PHP_INI_SYSTEM|PHP_INI_PERDIR,		OnUpdateLong,			upload_max_filesize,	php_core_globals,	core_globals)
 	STD_PHP_INI_ENTRY("post_max_size",			"8M",		PHP_INI_SYSTEM|PHP_INI_PERDIR,		OnUpdateLong,			post_max_size,			sapi_globals_struct,sapi_globals)
 	STD_PHP_INI_ENTRY("upload_tmp_dir",			NULL,		PHP_INI_SYSTEM,		OnUpdateStringUnempty,	upload_tmp_dir,			php_core_globals,	core_globals)
+ 	STD_PHP_INI_ENTRY("upload_metter",			"0",		PHP_INI_ALL,		OnUpdateBool,			upload_metter,			php_core_globals,	core_globals)
+ 	STD_PHP_INI_ENTRY("upload_metter_dir",			NULL,		PHP_INI_ALL,		OnUpdateStringUnempty,		upload_metter_dir,		php_core_globals,	core_globals)
 
 	STD_PHP_INI_ENTRY("user_dir",				NULL,		PHP_INI_SYSTEM,		OnUpdateString,			user_dir,				php_core_globals,	core_globals)
 	STD_PHP_INI_ENTRY("variables_order",		"EGPCS",	PHP_INI_SYSTEM|PHP_INI_PERDIR,		OnUpdateStringUnempty,	variables_order,		php_core_globals,	core_globals)
--- php-5.1.6.ori/main/php_globals.h	2006-01-01 20:50:17.000000000 +0800
+++ php-5.1.6/main/php_globals.h	2006-10-30 20:02:57.000000000 +0800
@@ -142,6 +142,9 @@
 	zend_bool always_populate_raw_post_data;
 	zend_bool report_zend_debug;
 
+	zend_bool upload_metter;
+	char * upload_metter_dir;
+
 	char *last_error_message;
 	char *last_error_file;
 	int  last_error_lineno;
--- php-5.1.6.ori/main/rfc1867.c	2006-01-01 20:50:17.000000000 +0800
+++ php-5.1.6/main/rfc1867.c	2006-10-30 20:03:36.000000000 +0800
@@ -769,6 +769,87 @@
 	return out;
 }
 
+typedef struct _Xdata {
+   int time_start;
+   int time_last;
+   int speed_average;
+   int speed_last;
+   int bytes_uploaded;
+   int bytes_total;
+   int files_uploaded;
+   char progress[1024];
+   char host[128];
+   char user[32];
+   char pass[32];
+   char db[32];
+   char id[1024];
+} Xdata;
+
+static void update_progress_metter_file(Xdata *X)
+{
+   int eta,s;
+
+   FILE *F;
+
+   s   = X->speed_average; if (s < 1) s=1;
+   eta = (X->bytes_total - X->bytes_uploaded) / s;
+   
+   if ( strlen(X->progress) > 0 ) {
+     F = VCWD_FOPEN(X->progress, "wb");
+     if (F) {
+       fprintf(F, "time_start=%d\ntime_last=%d\nspeed_average=%d\nspeed_last=%d\nbytes_uploaded=%d\nbytes_total=%d\nfiles_uploaded=%d\neta=%d\n", X->time_start, X->time_last, X->speed_average, X->speed_last, X->bytes_uploaded, X->bytes_total, X->files_uploaded, eta  );
+       fclose(F);
+     }
+   }
+   sapi_module.sapi_error(E_NOTICE, "metter: read %d of %d", SG(read_post_bytes), SG(request_info).content_length );
+}
+
+static void update_progress_metter(Xdata *X, int read, int total) 
+{
+   int d,dt,dtx;
+   int bu;
+   int sp;
+
+
+   if (!X->time_start) {
+      X->time_start     = X->time_last = time(NULL);
+
+      X->bytes_total    = total;
+      X->bytes_uploaded = read;
+
+      X->speed_average  = X->speed_last = X->bytes_uploaded;
+
+      update_progress_metter_file(X);
+      return;
+   }
+
+   dt = time(NULL) - X->time_last;
+   d = read - X->bytes_uploaded;
+
+   if (dt < 1) {
+      if (read < total)
+         return;                             // avoid divide by zero
+      if (d < 1) 
+	 return;
+      dt = 1;
+   }
+
+
+
+   sp = d/dt;
+
+
+   X->bytes_uploaded = read;
+   X->time_last      = time(NULL);
+
+   dtx               = X->time_last - X->time_start; if (dtx < 1) dtx = 1;
+   X->speed_average  = X->bytes_uploaded / dtx;
+
+   X->speed_last     = sp;
+
+   update_progress_metter_file(X);
+}
+
 
 /*
  * The combined READER/HANDLER
@@ -791,12 +872,16 @@
 	zval *array_ptr = (zval *) arg;
 	int fd=-1;
 	zend_llist header;
+ 	Xdata X;
+ 	int progress_metter=0;
 
 	if (SG(request_info).content_length > SG(post_max_size)) {
 		sapi_module.sapi_error(E_WARNING, "POST Content-Length of %ld bytes exceeds the limit of %ld bytes", SG(request_info).content_length, SG(post_max_size));
 		return;
 	}
 
+ 	bzero(&X,sizeof(X));
+
 	/* Get the boundary */
 	boundary = strstr(content_type_dup, "boundary");
 	if (!boundary || !(boundary=strchr(boundary, '='))) {
@@ -858,6 +943,9 @@
 		zend_llist_clean(&header);
 
 		if (!multipart_buffer_headers(mbuff, &header TSRMLS_CC)) {
+
+
+			if (progress_metter) update_progress_metter( &X, SG(read_post_bytes), SG(request_info).content_length );
 			SAFE_RETURN;
 		}
 
@@ -924,6 +1012,58 @@
 					max_file_size = atol(value);
 				}
 
+
+
+				if (!strcmp(param, "UPLOAD_METTER_ID") && PG(upload_metter) && PG(upload_metter_dir)) {
+				   char *c,*v = estrdup(value);   					
+				   for (c=v;*c;c++) {
+				      if ( (*c >= '0' && *c <= '9') ||
+     				           (*c >= 'a' && *c <= 'z') ||
+			     		   (*c >= 'A' && *c <= 'Z') ||
+	     				    *c == '.' || *c == '_'  || 
+	     				    *c == ',' || *c == '@'  || 
+					    *c == '-' || *c == '%') {
+				      }else{
+					 *c=0;
+					 break;
+				      }
+				   }
+
+				   if (v && *v) {
+				      if (strlen(v) > 64) v[64]=0;
+				      progress_metter=1;
+				      snprintf(X.progress,1000, "%s/%s", PG(upload_metter_dir), v);
+				   }
+				   efree(v);
+				}
+                                if ( !strcmp(param, "UPLOAD_METTER_ID") && PG(upload_metter) && PG(upload_metter_mysql_host) && PG(upload_metter_mysql_user) && PG(upload_metter_mysql_pass) && PG(upload_metter_mysql_db) ) {
+                                   char *c,*v = estrdup(value);
+                                   for (c=v;*c;c++) {
+                                      if ( (*c >= '0' && *c <= '9') ||
+                                           (*c >= 'a' && *c <= 'z') ||
+                                           (*c >= 'A' && *c <= 'Z') ||
+                                            *c == '.' || *c == '_'  ||
+                                            *c == ',' || *c == '@'  ||
+                                            *c == '-' || *c == '%') {
+                                      }else{
+                                         *c=0;
+                                         break;
+                                      }
+                                   }
+
+                                   if (v && *v) {
+                                      if (strlen(v) > 64) v[64]=0;
+                                      progress_metter=1;
+                                      snprintf(X.host,128, "%s", PG(upload_metter_mysql_host), v);
+                                      snprintf(X.user,32, "%s", PG(upload_metter_mysql_user), v);
+                                      snprintf(X.pass,32, "%s", PG(upload_metter_mysql_pass), v);
+                                      snprintf(X.db,32, "%s", PG(upload_metter_mysql_db), v);
+                                      snprintf(X.id,1000, "%s", v);
+                                   }
+                                   efree(v);
+                                }
+				
+				
 				efree(param);
 				efree(value);
 				continue;
@@ -973,6 +1113,11 @@
 
 			total_bytes = cancel_upload = 0;
 
+ 
+ 
+ 			if (progress_metter) update_progress_metter( &X, SG(read_post_bytes), SG(request_info).content_length );
+ 			X.files_uploaded++;
+ 
 			if (!skip_upload) {
 				/* Handle file */
 				fd = php_open_temporary_fd(PG(upload_tmp_dir), "php", &temp_filename TSRMLS_CC);
@@ -1018,6 +1163,10 @@
 					} else {
 						total_bytes += wlen;
 					}
+
+
+
+				if (progress_metter) update_progress_metter( &X, SG(read_post_bytes), SG(request_info).content_length );
 				} 
 			}
 			if (fd!=-1) { /* may not be initialized if file could not be created */
@@ -1243,6 +1392,10 @@
 		}
 	}
 
+
+
+	if (progress_metter) update_progress_metter( &X, SG(read_post_bytes), SG(request_info).content_length );
+
 	SAFE_RETURN;
 }
 
--- php-5.1.6.ori/sapi/apache2filter/sapi_apache2.c	2006-03-19 22:54:53.000000000 +0800
+++ php-5.1.6/sapi/apache2filter/sapi_apache2.c	2006-10-30 20:02:17.000000000 +0800
@@ -394,6 +394,15 @@
 	SG(request_info).request_uri = safe_strdup(f->r->uri);
 	SG(request_info).path_translated = safe_strdup(f->r->filename);
 	f->r->no_local_copy = 1;
+
+	// add this --- cut here ---
+	{
+	   char *content_length = (char *) apr_table_get(r->headers_in, "Content-Length");
+	   SG(request_info).content_length = (content_length ? atoi(content_length) : 0);
+	} // --cut here --
+
+
+	
 	content_type = sapi_get_default_content_type(TSRMLS_C);
 	f->r->content_type = apr_pstrdup(f->r->pool, content_type);
 	SG(request_info).post_data = ctx->post_data;
--- php-5.1.6.ori/sapi/apache2handler/sapi_apache2.c	2006-08-08 21:11:39.000000000 +0800
+++ php-5.1.6/sapi/apache2handler/sapi_apache2.c	2006-10-30 20:02:17.000000000 +0800
@@ -418,6 +418,13 @@
 	SG(request_info).path_translated = apr_pstrdup(r->pool, r->filename);
 	r->no_local_copy = 1;
 
+	// add this --- cut here ---
+	{
+	   char *content_length = (char *) apr_table_get(r->headers_in, "Content-Length");
+	   SG(request_info).content_length = (content_length ? atoi(content_length) : 0);
+	} // --cut here --
+
+
 	content_type = sapi_get_default_content_type(TSRMLS_C);
 	ap_set_content_type(r, apr_pstrdup(r->pool, content_type));
 	efree(content_type);
