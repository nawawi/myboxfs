#!/bin/sh
# +-----------------------------------------------------------------------------+
# | Copyright (c) 2002-2006 Tracenetwork Corporation Sdn. Bhd.           	|
# +-----------------------------------------------------------------------------+
# | This source file is belongs to nawawi, the author.                    	|
# | Any changes/use of the source, please email to the author.           	|
# +-----------------------------------------------------------------------------+
# | Authors: nawawi, Mohd nawawi Mohamad Jamili <nawawi@tracenetwork.com.my 	|
# +-----------------------------------------------------------------------------+
#

trap : 1 2 3 15
PATH="/bin"
TERM=linux
export PATH TERM
umask 077
cd /
echo "0 0 0 0" > /proc/sys/kernel/printk
# irc stuff
if ! lsmod 2>/dev/null |grep -q ip_conntrack_irc; then
	modprobe -q -k ip_conntrack_irc ports=6660,6667,6668,6669,7000,7001,7002 >> /dev/null 2>&1
	[ $? = 0 ] && echo "* Loading ip_conntrack_irc"
fi

# irc stuff
if ! lsmod 2>/dev/null |grep -q ip_nat_irc; then
	modprobe -q -k ip_nat_irc >> /dev/null 2>&1
	[ $? = 0 ] && echo "* Loading ip_nat_irc"
fi

# allow local lan to ftp out side
if ! lsmod 2>/dev/null |grep -q ip_conntrack_ftp; then
	modprobe -q -k ip_conntrack_ftp ports=21,20 >> /dev/null 2>&1
	[ $? = 0 ] && echo "* Loading ip_conntrack_ftp"
fi

# ftp stuff
if ! lsmod 2>/dev/null |grep -q ip_nat_ftp; then
	modprobe -q -k ip_nat_ftp >> /dev/null 2>&1
	[ $? = 0 ] && echo "* Loading ip_nat_ftp"
fi


# value to tell kernel maximum ip conntrack can handle
if [ -r "/proc/sys/net/ipv4/ip_conntrack_max" ]; then
	echo "70000" > /proc/sys/net/ipv4/ip_conntrack_max
	echo "* Setting ip_conntrack_max=70000"
fi

if [ -r "/proc/sys/net/ipv4/netfilter/ip_conntrack_tcp_timeout_established" ]; then
	echo "108000" > /proc/sys/net/ipv4/netfilter/ip_conntrack_tcp_timeout_established
	echo "* Setting ip_conntrack_tcp_timeout_established=108000"
fi

# value to tells kernel how long to keep sockets in the state FIN-WAIT-2
if [ -r "/proc/sys/net/ipv4/tcp_fin_timeout" ]; then
	echo "10" > /proc/sys/net/ipv4/tcp_fin_timeout
	echo "* Setting tcp_fin_timeout=10"
fi

# value to tells the TCP/IP stack how often to send TCP keepalive packets to 
# keep an connection alive if it is currently unused
if [ -r "/proc/sys/net/ipv4/tcp_keepalive_time" ]; then
	echo "1800" > /proc/sys/net/ipv4/tcp_keepalive_time
	echo "* Setting tcp_keepalive_time=1800"
fi

# 0/1 = disable/enable window scaling
if [ -r "/proc/sys/net/ipv4/tcp_window_scaling" ]; then
	echo "0" > /proc/sys/net/ipv4/tcp_window_scaling
	echo "* Disable tcp_window_scaling"
fi

# 0/1 = disable/enable Selective Acknowledgements (SACK)
if [ -r "/proc/sys/net/ipv4/tcp_sack" ]; then
	echo "0" > /proc/sys/net/ipv4/tcp_sack
	echo "* Disable tcp_sack"
fi

if [ -r "/proc/sys/net/ipv4/tcp_timestamps" ]; then
	echo "0" > /proc/sys/net/ipv4/tcp_timestamps
	echo "* Disable tcp_timestamps"
fi
# 1/0 = disable/enable PING request
if [ -r "/proc/sys/net/ipv4/icmp_echo_ignore_all" ]; then
	echo "0" > /proc/sys/net/ipv4/icmp_echo_ignore_all
	echo "* Enable PING request"
fi

# 0/[1-7] = disable/enable dynamic IP address following
if [ -r "/proc/sys/net/ipv4/ip_dynaddr" ]; then
	echo "7" > /proc/sys/net/ipv4/ip_dynaddr
	echo "* Enable dynamic IP address following"
fi

# 0/1 = disable/enable smurf attacks protect
if [ -r "/proc/sys/net/ipv4/icmp_echo_ignore_broadcasts" ]; then
	echo "1" > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts
	echo "* Enable smurf attacks protect"
fi

# 0/1 = disable/enable bad error message protection
if [ -r "/proc/sys/net/ipv4/icmp_ignore_bogus_error_responses" ]; then
	echo "1" > /proc/sys/net/ipv4/icmp_ignore_bogus_error_responses
	echo "* Enable icmp ignore bogus error responses"
fi

# 0 = yes 1 = no : Don't accept source routed packets
if [ -r "/proc/sys/net/ipv4/conf/all/accept_source_route" ]; then
	echo "0" > /proc/sys/net/ipv4/conf/all/accept_source_route
	echo "* Enable not accept source routed packets"
fi

# 0/1 = disable/enable Syncookies
if [ -r "/proc/sys/net/ipv4/tcp_syncookies" ]; then
	echo "1" > /proc/sys/net/ipv4/tcp_syncookies
	echo "* Enable Syncookies protect"
fi

# Reduce SYN Floods
if [ -r "/proc/sys/net/ipv4/tcp_max_syn_backlog" ]; then
	echo "1208" > /proc/sys/net/ipv4/tcp_max_syn_backlog 
	echo "* Reduce SYN Floods set to 1208"
fi

# 0/1 = disable/enable IP spoofing
echo "* Enable IP spoofing protect"
for f in /proc/sys/net/ipv4/conf/*/rp_filter; do 
	[ -r "$f" ] && echo "1" > $f
done

# 0 = yes 1 = no : Protect ICMP accept redirect
echo "* Enable ICMP accept redirect protect"
for f in /proc/sys/net/ipv4/conf/*/accept_redirects; do 
	[ -r "$f" ] && echo "0" > $f
done

# 0 = yes 1 = no : Protect ICMP send redirect
echo "* Enable ICMP send redirect protect"
for f in /proc/sys/net/ipv4/conf/*/send_redirects; do 
	[ -r "$f" ] && echo "0" > $f
done

# 0/1 = disable/enable Log packets with impossible addresses
if [ -r "/proc/sys/net/ipv4/conf/all/log_martians" ]; then
	echo "0" > /proc/sys/net/ipv4/conf/all/log_martians
	echo "* Disable log martians"
fi

if [ -r "/proc/sys/fs/file-max" ]; then
	echo "* Set file descriptors limit 64000"
	echo "64000" > /proc/sys/fs/file-max
	ulimit -n 64000
fi

# shm ipc max size
if [ -r "/proc/sys/kernel/shmmax" ]; then
	echo "* Setting shm ipc max size 2147483648"
	echo "2147483648" > /proc/sys/kernel/shmmax
fi

if [ -r "/proc/sys/net/ipv4/ip_local_port_range" ]; then
	echo "* Increase the local port range min 1024 max 65535"
	echo "1024 65535" > /proc/sys/net/ipv4/ip_local_port_range
fi

# pptp stuff
if ! lsmod 2>/dev/null |grep -q ip_gre; then
	modprobe -q -k ip_gre >> /dev/null 2>&1
	[ $? = 0 ] && echo "* Loading ip_gre"
fi
if ! lsmod 2>/dev/null |grep -q ip_conntrack_proto_gre; then
	modprobe -q -k ip_conntrack_proto_gre >> /dev/null 2>&1
	[ $? = 0 ] && echo "* Loading ip_conntrack_proto_gre"
fi
if ! lsmod 2>/dev/null |grep -q ip_conntrack_pptp; then
	modprobe -q -k ip_conntrack_pptp >> /dev/null 2>&1
	[ $? = 0 ] && echo "* Loading ip_conntrack_pptp"
fi
if ! lsmod 2>/dev/null |grep -q ip_nat_pptp; then
	modprobe -q -k ip_nat_pptp  >> /dev/null 2>&1
	[ $? = 0 ] && echo "* Loading ip_nat_pptp"
fi

# netbios stuff for pptp
if ! lsmod 2>/dev/null |grep -q ip_conntrack_netbios_ns; then
	modprobe -q -k ip_conntrack_netbios_ns >> /dev/null 2>&1
	[ $? = 0 ] && echo "* Loading ip_conntrack_netbios_ns"
fi

# arptables
if ! lsmod 2>/dev/null |grep -q arp_tables; then
	modprobe -q -k arp_tables >> /dev/null 2>&1
	[ $? = 0 ] && echo "* Loading arp_tables"
fi

if ! lsmod 2>/dev/null |grep -q arptable_filter; then
	modprobe -q -k arptable_filter >> /dev/null 2>&1
	[ $? = 0 ] && echo "* Loading arptable_filter"
fi

# h323
if ! lsmod 2>/dev/null |grep -q ip_conntrack_h323; then
	modprobe -q -k ip_conntrack_h323 >> /dev/null 2>&1
	[ $? = 0 ] && echo "* Loading ip_conntrack_h323"
fi

# sip
if ! lsmod 2>/dev/null |grep -q ip_conntrack_sip; then
	modprobe -q -k ip_conntrack_sip >> /dev/null 2>&1
	[ $? = 0 ] && echo "* Loading ip_conntrack_sip"
fi

# tftp
if ! lsmod 2>/dev/null |grep -q ip_conntrack_tftp; then
	modprobe -q -k ip_conntrack_tftp >> /dev/null 2>&1
	[ $? = 0 ] && echo "* Loading ip_conntrack_tftp"
fi

# sctp
if ! lsmod 2>/dev/null |grep -q ip_conntrack_proto_sctp; then
	modprobe -q -k ip_conntrack_proto_sctp >> /dev/null 2>&1
	[ $? = 0 ] && echo "* Loading ip_conntrack_proto_sctp"
fi

# arp anti spoofing
echo "* Setting ARP spoof protection"
for f in /proc/sys/net/ipv4/neigh/*/arp_antidote;do 
	if [ -f "$f" ]; then
		echo "2" > $f
	fi
done

# icmp,tcp restric
echo "* Setting TCP/ICMP restrict"
if [ -f "/proc/sys/net/ipv4/icmp_restrict" ]; then
	echo "0" > /proc/sys/net/ipv4/icmp_restrict
	echo "1" > /proc/sys/net/ipv4/tcp_restrict
fi

# arp flux
echo "* Setting ARP flux correction" 
for f in /proc/sys/net/ipv4/conf/*/hidden; do
	if [ -f "$f" -a "$f" != "/proc/sys/net/ipv4/conf/lo/hidden" ]; then
		echo "1" > "$f"
	fi
done
