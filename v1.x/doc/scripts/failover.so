<?
//
// Mybox Firewall - A Firewall Appliance
// http://www.mybox.net.my/
//
// (C) Copyright 2002,2003,2004 Mohd Nawawi Mohamad Jamili, TraceNetwork Corporation Sdn. Bhd.
//
// This program is not free software; you cannot redistribute it and/or
// modify without permission copyright owner.
//
// This code is protected by copyright law and international treaties. 
// Unauthorized reproduction or distribution of this program, or any portion of it, 
// may result in severe civil and criminal penalties, and will be prosecuted to the 
// maximum extent possible under the law.
//
// $Id: failover.so,v 1.02 2003/12/19 1:07 AM nawawi Exp $
//
// history: 04/10/2004 - Remove fa_alert
//

	set_time_limit(0);
	include_once('/usr/miniserv/scripts/functions.inc');
	include_once('/usr/miniserv/scripts/smtp.inc');

	function echo_stdout($text) {
		global $show_debug, $no_time;
		if($show_debug==1) {
			$time=date('[Y/m/d - h:i:s A]',time());
			$fp = @fopen("php://stdout", "w");
			if($no_time==1) {
				@fputs($fp,"$text\n");
			} else {
				@fputs($fp,"$time - $text\n");
			}
			@fclose($fp);
		}
		unset($text);
	}

	function check_ip($ip) {
		if(!preg_match("/(\d+\.\d+\.\d+\.\d+)/",$ip)) {
			return false;
		}
		return true;
	}

	function get_readline($text) {
		$fo = fopen("php://stdout", "w");
		fputs($fo,"$text");
		$fp=fopen("php://stdin", "r");
		$in=fgets($fp, 4094);
		fclose($fo);
		fclose($fp);
		return trim($in);
	}

	function get_read_end_line() {
		$fp=fopen("php://stdin", "r");
		$in=fread($fp, 1);
		$output='';
		while($in != '!') {
			$output=$output.$in;
			$in=fread($fp, 1);
		}
		fclose($fp);
		return $output;
	}

	function do_config() {
		global $show_debug, $no_time;
		$show_debug='1';
		$no_time='1';
		$config=array();
		if(!file_exists('/hd/configs/mybox.cnf')) {
			echo_stdout("Config file not found - /hd/configs/mybox.cnf");
			exit;
		}
		echo_stdout("FAILOVER CONFIGURATION ----\n");
		$gateway_backup=get_readline("IP Address for secondary gateway\nGATEWAY_BACKUP=");
		$loop_check=get_readline("Time in second before other process\nLOOP_CHECK=");
		$timeout_connect=get_readline("Time in second link to connect\nTIMEOUT_CONNECT=");
		$time_switch=get_readline("Time in minute link to switch default gateway\nTIME_SWITCH= ");
		if(!check_ip($gateway_backup)) {
			echo_stdout("Invalid IP for GATEWAY_BACKUP - $gateway_backup");
			exit;
		}
		if(!is_numeric($loop_check)) {
			echo_stdout("Invalid Second for LOOP_CHECK - $loop_check");
			exit;
		}
		if(!is_numeric($timeout_connect)) {
			echo_stdout("Invalid Second for TIMEOUT_CONNECT - $timeout_connect");
			exit;
		}
		if(!is_numeric($time_switch)) {
			echo_stdout("Invalid Second for TIME_SWITCH - $time_switch");
			exit;
		}
		echo_stdout("FAILOVER CONFIGURATION ----\n");
		echo_stdout("GATEWAY_BACKUP=$gateway_backup");
		echo_stdout("LOOP_CHECK=$loop_check");		
		echo_stdout("TIMEOUT_CONNECT=$timeout_connect");
		echo_stdout("TIME_SWITCH=$time_switch\n");
		echo_stdout("Enter link to check - ip:port . end by '!'\n");
		$falink=get_read_end_line();
		$save_yes=get_readline("Write to config file [Y/N] ");
		$save_yes=strtolower($save_yes);
		if($save_yes=='y') {
			write_ini('FAILOVER','GATEWAY_BACKUP',$gateway_backup);
			write_ini('FAILOVER','LOOP_CHECK',$loop_check);
			write_ini('FAILOVER','TIMEOUT_CONNECT',$timeout_connect);
			write_ini('FAILOVER','TIME_SWITCH',$time_switch);
			write_ini('FAILOVER','LINK','/hd/configs/falink.lst');
			$fp=fopen("/hd/configs/falink.lst","w");
			fputs($fp,"$falink");
			fclose($fp);
			echo_stdout("Writing data...");
			sleep(1);
			@touch('/tmp/reset_fa');
			flush();
		}
		exit;
	}

	function socket_raw_connect($server, $port) {
		global $timeout;
		$fp=@fsockopen($server, $port, $errno, $errstr, $timeout); 
		if(!$fp) { 
   			echo_stdout("Link Error - $errstr ($errno)");
			@fclose($fp); 
			return 0;
		} 
		@fclose($fp);
		echo_stdout("UP - link $server no error");
		flush();
		return 1;
	}

	function grep_route($gw) {
		$handle=@popen("route -n",'r');
        	if($handle) {
			while($buff=fgets($handle,4096)) {
                		$buff=trim($buff);
                		list($destination,$gateway,$genmask,$flags,$metric,$ref,$use,$iface)=preg_split('/\s+/',$buff);
				if($destination=='0.0.0.0' && $gateway=="$gw" && $flags=='UG') {
					unset($buff);
					return $gateway;
				}
        		}
        		pclose($handle);
			unset($buff,$destination,$gateway,$genmask,$flags,$metric,$ref,$use,$iface);
		}
		return null;
	}

	function ip_route_clean() {
		$handle=@popen("route -n |grep UG",'r');
        	if($handle) {
			while($buff=fgets($handle,4096)) {
                		$buff=trim($buff);
				list($destination,$gateway,$genmask,$flags,$metric,$ref,$use,$iface)=preg_split('/\s+/',$buff);
                		if($destination=='0.0.0.0' && $flags=='UG') {
                			@shell_exec("route del default gw $gateway >/dev/null 2>&1");
				}
        		}
        		pclose($handle);
			unset($buff,$destination,$gateway,$genmask,$flags,$metric,$ref,$use,$iface);
		}
		@shell_exec("ip route flush cache >/dev/null 2>&1");
	}

	function ip_route($gw) {
		global $gateway_state;
		@shell_exec("route add default gw $gw metric 1 >/dev/null 2>&1");
		@shell_exec("ip route flush cache >/dev/null 2>&1");
		$gw=grep_route($gateway_state);
		$gateway_state="$gw";
	}

	function default_route() {
		global $gw_default, $gw_state;
		ip_route_clean();
		ip_route($gw_default);
		$gw_state="$gw_default";
	}

	function do_change_route() {
		global $gw_default, $gw_backup, $gw_state;
		$gw=grep_route($gw_state);
		echo_stdout("DOWN - link via $gw_state broken");
		if($gw_state=="$gw_default") {
			$gw_state="$gw_backup";
		} elseif($gw_state=="$gw_backup") {
			$gw_state="$gw_default";
		} else {
			echo_stdout("not found any gateway state - set to $gw_default");
			$gw_state="$gw_default";
		}
		ip_route_clean();
		echo_stdout("nexthop to $gw_state");
		echo_stdout("route add default gw $gw_state metric 1");
		echo_stdout("ip route flush cache");
		ip_route($gw_state);
		return true;
	}

	function chk_switch_back() {
		global $time_back, $time_switch, $gw_default, $gw_state;
		$gw=grep_route($gw_default);
		if((time() >= $time_back) && ($gw!="$gw_default")) {
			echo_stdout("Switching to default ISP - $gw_default");
			echo_stdout("route add default gw $gw_default metric 1");
			echo_stdout("ip route flush cache");
			ip_route_clean();
			ip_route($gw_default);
			$time=time();
			$time_back=$time + 60 * $time_switch;
			$gw_state="$gw_default";
		}
	}

	function arg_switch() {
		global $show_debug, $argv, $argc;
		for($i='1';$i<$argc;$i++) {
			$cmd=$argv[$i];
			$cmd=strtolower($cmd);
			switch($cmd) {
				case '-d':
					$show_debug='1';
				break;
				case '-c':
					do_config();
					exit;
				break;
			}
        	}
	}

	function load_config() {
		global $down_state, $time_back, $time_switch, $gw_default;
		global $gw_backup, $timeout, $loop, $time_switch;
		global $gw_state, $fwlink, $show_debug;
		if(!isset($show_debug)) $show_debug='0';
		$down_state='0';
		$gw_default=get_ini('NETWORK','GATEWAY');
		$gw_backup=get_ini('FAILOVER','GATEWAY_BACKUP');
		$timeout=get_ini('FAILOVER','TIMEOUT_CONNECT');
		$loop=get_ini('FAILOVER','LOOP_CHECK');
		$time_switch=get_ini('FAILOVER','TIME_SWITCH');
		$link=get_ini('FAILOVER','LINK');
		$gw_state="$gw_default";
		$time=time();
		$time_back=$time + 60 * $time_switch;
		if(!check_ip($gw_default)) {
			$show_debug='1';
			echo_stdout("\n\nERROR: Invalid IP for default gateway - $gw_default\n");
			exit;
		}

		if(!check_ip($gw_backup)) {
			$show_debug='1';
			echo_stdout("\n\nERROR: Invalid IP for secondary gateway - $gw_backup\n");
			exit;
		}

		if(!is_numeric($loop)) {
			$show_debug='1';
			echo_stdout("\n\nERROR: Invalid second to Idle - $loop\n");
			exit;
		}

		if(!is_numeric($timeout)) {
			$show_debug='1';
			echo_stdout("\n\nERROR: Invalid second to Timeout - $timeout\n");
			exit;
		}

		if(file_exists($link)) {
			$fwlink=file($link);
		} else {
			$fwlink=null;
		}
	}

	function main_loop() {
		global $time_back, $time_switch, $gw_default;
		global $gw_backup, $timeout, $loop, $no_time;
		global $fwlink, $gw_state, $show_debug;
		$down_state='0';
		$is_down='0';
		$no_time='0';
		echo_stdout("Loading configuration..");
		echo_stdout("Loading default routing..");
		echo_stdout("START checking link..\n");
		for(;;) {
			if(file_exists('/tmp/reset_fa')) {
				load_config();
				default_route();
				@unlink('/tmp/reset_fa');
				echo_stdout("Reset to default routing..");
			}
			if(file_exists('/tmp/shutdown_fa')) {
				@unlink('/tmp/shutdown_fa');
				echo_stdout("STOP checking link.. shutdown\n");
			}
			sleep($loop);
			if($fwlink!=null) {
				foreach($fwlink as $gw) {
					$gw=trim($gw);
					if($gw!=null) {
						list($ip,$port)=preg_split('/:/',$gw);
						echo_stdout("Checking link $ip tcp/$port via $gw_state");
						if(socket_raw_connect($ip,$port)==1) {
							$down_state++; // one of link is OK
						} else {
							$is_down++;
						}
					}
					unset($gw,$ip,$port);
					flush();
				}
			}
			if($down_state==0) {
				// no link is UP
				do_change_route();
			} else {
				echo_stdout("Link OK - $down_state link(s) up $is_down links(s) down");
			}
			$down_state='0'; // counter back reset to zero
			$is_down='0';
			chk_switch_back();
			flush();
		}
	}

	set_time_limit(0);
	ini_set('display_errors','0');
	arg_switch();
	load_config();
	default_route();
	if(file_exists('/tmp/reset_fa')) @unlink('/tmp/reset_fa');
	if(file_exists('/tmp/shutdown_fa')) @unlink('/tmp/shutdown_fa');
	main_loop();
?>
