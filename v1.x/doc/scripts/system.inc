<?
	function get_ip($eth) {
		if($handle=popen("/sbin/ifconfig $eth 2>&1",'r')) {
			$buff=fread($handle,4096);
			pclose($handle);
			if(preg_match("/inet addr:(\d+\.\d+\.\d+\.\d+)/",$buff,$match)) {
        			return trim($match[1]);
			} else {
        			return 'N.A';
			}
		} else {
			return 'N.A';
		}
		flush();
	}
	function vhostname() {
        	if(!($result = getenv('SERVER_NAME'))) {
            		$result = 'N.A.';
        	}
        	return $result;
    	}

    	// get our canonical hostname
    	function chostname() {
        	if($fp = fopen('/proc/sys/kernel/hostname','r')) {
            		$result = trim(fgets($fp, 4096));
            		fclose($fp);
            		$result = gethostbyaddr(gethostbyname($result));
        	} else {
            		$result = 'N.A.';
        	}
        	return $result;
    	}

    	// get the IP address of our canonical hostname
    	function ip_addr() {
        	if(!($result = getenv('SERVER_ADDR'))) {
            		$result = gethostbyname($this->chostname());
        	}
        	return $result;
    	}

   	function kernel() {
        	if($fd = fopen('/proc/version', 'r')) {
            		$buf = fgets($fd, 4096);
            		fclose($fd);
            		if(preg_match('/version (.*?) /', $buf, $ar_buf)) {
                		$result = $ar_buf[1];
                		if(preg_match('/SMP/', $buf)) {
                    			$result .= ' (SMP)';
                		}
            		} else {
                		$result = 'N.A.';
           	 	}
        	} else {
            		$result = 'N.A.';
        	}
        	return $result;
    	}

   	function kernel_info() {
        	if($fd = fopen('/proc/version', 'r')) {
            		$buf = fgets($fd, 4096);
            		fclose($fd);
            		if(preg_match('/#(\d)\s+(.*?)$/', $buf, $ar_buf)) {
                		$result = $ar_buf[2];
                		if(preg_match('/SMP/', $buf)) {
                    			$result .= ' (SMP)';
                		}
            		} else {
                		$result = 'N.A.';
           	 	}
        	} else {
            		$result = 'N.A.';
        	}
        	return $result;
    	}

   	function kernel_admin() {
        	if($fd = fopen('/proc/version', 'r')) {
            		$buf = fgets($fd, 4096);
            		fclose($fd);
            		if(preg_match('/\s+\((.*?)@(.*?)\)/', $buf, $ar_buf)) {
                		$r1 = $ar_buf[1];
                		$r2 = $ar_buf[2];
				$result="$r1@$r2";
                		if(preg_match('/SMP/', $buf)) {
                    			$result .= ' (SMP)';
                		}
            		} else {
                		$result = 'N.A.';
           	 	}
        	} else {
            		$result = 'N.A.';
        	}
        	return $result;
    	}

	function uptime() {
        	$fd = fopen('/proc/uptime', 'r');
        	$ar_buf = split(' ', fgets($fd, 4096));
        	fclose($fd);

        	$sys_ticks = trim($ar_buf[0]);

        	$min   = $sys_ticks / 60;
        	$hours = $min / 60;
        	$days  = floor($hours / 24);
        	$hours = floor($hours - ($days * 24));
        	$min   = floor($min - ($days * 60 * 24) - ($hours * 60));




        	if($days != 0) {
            		$result = "$days days ";
        	}

        	if($hours != 0) {
            		$result .= "$hours hours ";
        	}
        	$result .= "$min minutes ";
        	return $result;
    	}

    	function loadavg() {
        	if($fd = fopen('/proc/loadavg', 'r')) {
            		list($p1,$p2,$p3)= split(' ', fgets($fd, 4096));
            		fclose($fd);
        	} else {
            		$results = 'N.A. N.A. N.A.';
        	}
        	return "$p1 $p2 $p3";
    	}

	function format_bytesize($kbytes, $dec_places = 2) {
    		if($kbytes >= 1048576) {
        		$result  = sprintf('%.' . $dec_places . 'f', $kbytes / 1048576);
        		$result .= ' GB';
    		} elseif ($kbytes >= 1024) {
        		$result  = sprintf('%.' . $dec_places . 'f', $kbytes / 1024);
        		$result .= ' MB';
    		} else {
        		$result  = sprintf('%.' . $dec_places . 'f', $kbytes);
        		$result .= ' KB';
    		}
    		return $result;
	}
	
    	function network () {
        	$results = array();
        	if($fd = fopen('/proc/net/dev', 'r')) {
            		while ($buf = fgets($fd, 4096)) {
                		if(preg_match('/:/', $buf)) {
                    			list($dev_name, $stats_list) = preg_split('/:/', $buf, 2);
                    			$stats = preg_split('/\s+/', trim($stats_list));
                    			$results[$dev_name] = array();
                    			$results[$dev_name]['rx_bytes']   = $stats[0];
                    			$results[$dev_name]['rx_packets'] = $stats[1];
                    			$results[$dev_name]['rx_errs']    = $stats[2];
                    			$results[$dev_name]['rx_drop']    = $stats[3];
                    			$results[$dev_name]['tx_bytes']   = $stats[8];
                    			$results[$dev_name]['tx_packets'] = $stats[9];
                    			$results[$dev_name]['tx_errs']    = $stats[10];
                    			$results[$dev_name]['tx_drop']    = $stats[11];
                    			$results[$dev_name]['errs']       = $stats[2] + $stats[10];
                    			$results[$dev_name]['drop']       = $stats[3] + $stats[11];
               			}
            		}
        	}
        	return $results;
    	}

    	function memory () {
        	if($fd = fopen('/proc/meminfo', 'r')) {
            		while($buf = fgets($fd, 4096)) {
                		if(preg_match('/Mem:\s+(.*)$/', $buf, $ar_buf)) {
                    			$ar_buf = preg_split('/\s+/', $ar_buf[1], 6);
                    			$results['ram'] = array();
                    			$results['ram']['total']   = $ar_buf[0] / 1024;
                    			$results['ram']['used']    = $ar_buf[1] / 1024;
                    			$results['ram']['free']    = $ar_buf[2] / 1024;
                    			$results['ram']['shared']  = $ar_buf[3] / 1024;
                    			$results['ram']['buffers'] = $ar_buf[4] / 1024;
                    			$results['ram']['cached']  = $ar_buf[5] / 1024;
                    			$results['ram']['t_used']  = $results['ram']['used'];
                    			$results['ram']['t_free']  = $results['ram']['total'] - $results['ram']['t_used'];
                    			$results['ram']['percent'] = round(($results['ram']['t_used'] * 100) / $results['ram']['total']);
                		}

                		if(preg_match('/Swap:\s+(.*)$/', $buf, $ar_buf)) {
                    			$ar_buf = preg_split('/\s+/', $ar_buf[1], 3);
                    			$results['swap'] = array();
                    			$results['swap']['total']   = $ar_buf[0] / 1024;
                    			$results['swap']['used']    = $ar_buf[1] / 1024;
                    			$results['swap']['free']    = $ar_buf[2] / 1024;
                    			$results['swap']['percent'] = round(($ar_buf[1] * 100) / $ar_buf[0]);
                    			$swaps = file('/proc/swaps');
                    			$swapdevs = split("\n", $swaps);
                    			for($i = 1; $i < (sizeof($swapdevs) - 1); $i++) {
                        			$ar_buf = preg_split('/\s+/', $swapdevs[$i], 6);
                        			$results['devswap'][$i - 1] = array();
                        			$results['devswap'][$i - 1]['dev']     = $ar_buf[0];
                        			$results['devswap'][$i - 1]['total']   = $ar_buf[2];
                        			$results['devswap'][$i - 1]['used']    = $ar_buf[3];
                        			$results['devswap'][$i - 1]['free']    = ($results['devswap'][$i - 1]['total'] - $results['devswap'][$i - 1]['used']);
                        			$results['devswap'][$i - 1]['percent'] = round(($ar_buf[3] * 100) / $ar_buf[2]);
                    			}
                    			break;
                		}
            		}
            		fclose($fd);
        	} else {
            		$results['ram'] = array();
            		$results['swap'] = array();
            		$results['devswap'] = array();
        	}
        	return $results;
    	}

    	function cpu_info () {
        	$results = array();
        	$ar_buf = array();
        	if($fd = fopen('/proc/cpuinfo', 'r')) {
            		while($buf = fgets($fd, 4096)) {
                		list($key, $value) = preg_split('/\s+:\s+/', trim($buf), 2);
                		switch ($key) {
                    			case 'model name':
                        			$results['model'] = $value;
                        			break;
                    			case 'cpu MHz':
                        			$results['mhz'] = sprintf('%.2f', $value);
                        			break;
                    			case 'cycle frequency [Hz]': // For Alpha arch - 2.2.x
                        			$results['mhz'] = sprintf('%.2f', $value/1000000);
                        			break;
                    			case 'clock': // For PPC arch (damn borked POS)
                        			$results['mhz'] = sprintf('%.2f', $value);
                        			break;
                    			case 'cpu': // For PPC arch (damn borked POS)
                        			$results['model'] = $value;
                       				 break;
                    			case 'revision': // For PPC arch (damn borked POS)
                        			$results['model'] .= ' ( rev: ' . $value . ')';
                        			break;
                    			case 'cpu model': // For Alpha arch - 2.2.x
                        			$results['model'] .= ' (' . $value . ')';
                        			break;
                    			case 'cache size':
                        			$results['cache'] = $value;
                        			break;
                    			case 'bogomips':
                        			$results['bogomips'] += $value;
                        			break;
                    			case 'BogoMIPS': // For alpha arch - 2.2.x
                        			$results['bogomips'] += $value;
                       				break;
                    			case 'BogoMips': // For sparc arch
                        			$results['bogomips'] += $value;
                        			break;
                    			case 'cpus detected': // For Alpha arch - 2.2.x
                        			$results['cpus'] += 1;
                        			break;
                    			case 'system type': // Alpha arch - 2.2.x
                        			$results['model'] .= ', ' . $value . ' ';
                        			break;
                    			case 'platform string': // Alpha arch - 2.2.x
                        			$results['model'] .= ' (' . $value . ')';
                        			break;
                    			case 'processor':
                        			$results['cpus'] += 1;
                        			break;
                		}
            		}
            		fclose($fd);
        	}

        	$keys = array_keys($results);
        	$keys2be = array('model', 'mhz', 'cache', 'bogomips', 'cpus');

        	while($ar_buf = each($keys2be)) {
            		if (! in_array($ar_buf[1], $keys)) {
                		$results[$ar_buf[1]] = 'N.A.';
            		}
        	}
        	return $results;
   	 }

	function pci() {
        	$results = array();
        	if($fd = fopen('/proc/pci', 'r')) {
            		while($buf = fgets($fd, 4096)) {
                		if(preg_match('/Bus/', $buf)) {
                    			$device = 1;
                    			continue;
                		}
                		if($device) {
                    			list($key, $value) = split(': ', $buf, 2);
                    			if(!preg_match('/bridge/i', $key) && !preg_match('/USB/i', $key)) {
                        			$results[] = preg_replace('/\([^\)]+\)\.$/', '', trim($value));
                    			}
                    			$device = 0;
                		}
            		}
        	}
        	return $results;
    	}

    	function ide() {
        	$results = array();
        	$handle = opendir('/proc/ide');
        	while ($file = readdir($handle)) {
            		if (preg_match('/^hd/', $file)) {
                		$results[$file] = array();
                		// Check if device is CD-ROM (CD-ROM capacity shows as 1024 GB)
                		if($fd = fopen("/proc/ide/$file/media", 'r')) {
                    			$results[$file]['media'] = trim(fgets($fd, 4096));
                    			if ($results[$file]['media'] == 'disk') {
                        			$results[$file]['media'] = 'Hard Disk';
                    			}
                    			if ($results[$file]['media'] == 'cdrom') {
                        			$results[$file]['media'] = 'CD-ROM';
                    			}
                    			fclose($fd);
                		}

				if(file_exists("/proc/ide/$file/model")) {
                			if($fd = fopen("/proc/ide/$file/model", 'r')) {
                    				$results[$file]['model'] = trim(fgets($fd, 4096));
                    				if(preg_match('/WDC/', $results[$file]['model'])) {
                        				$results[$file]['manufacture'] = 'Western Digital';
                    				} elseif (preg_match('/IBM/', $results[$file]['model'])) {
                        				$results[$file]['manufacture'] = 'IBM';




                    				} elseif (preg_match('/FUJITSU/', $results[$file]['model'])) {
                        				$results[$file]['manufacture'] = 'Fujitsu';
                    				} else {
                        				$results[$file]['manufacture'] = 'Unknown';
                    				}
                    				fclose($fd);
                			}
				}
			}
			if(file_exists("/proc/ide/$file/capacity")) {
                		if($fd = fopen("/proc/ide/$file/capacity", 'r')) {
                    			$results[$file]['capacity'] = trim(fgets($fd, 4096));
                    			if($results[$file]['media'] == 'CD-ROM') {
                        			unset($results[$file]['capacity']);
                    			}
                    			fclose($fd);
                		}
			}
            	}
        	closedir($handle); 
       	 	return $results;
    	}

?>
