#!/bin/php -q
<?
//
// Mybox Firewall - A Firewall Appliance
// http://www.mybox.net.my/
//
// (C) Copyright 2002,2003,2004 Mohd Nawawi Mohamad Jamili, TraceNetwork Corporation Sdn. Bhd.
//
// This program is not free software; you cannot redistribute it and/or
// modify without permission copyright owner.
//
// This code is protected by copyright law and international treaties. 
// Unauthorized reproduction or distribution of this program, or any portion of it, 
// may result in severe civil and criminal penalties, and will be prosecuted to the 
// maximum extent possible under the law.
//
// $Id: ids_parse.so,v 2.01 2003/07/28 1:07 AM nawawi Exp $
//



	if(file_exists('scripts/functions.inc')) {
		include_once('scripts/functions.inc');
	} else {
		include_once('/usr/miniserv/scripts/functions.inc');
	}

	global $hash_ignore,$hash_block,$logdir,$block,$unblock,$iplist;

	function check_log_space() {
		// check if we mounted
		if(!is_dir('/hd/configs')) return 1;
		$size=disk_free_space("/hd/reports");
		if($size >= 1073741824) {
			if(file_exists('/tmp/no_log')) unlink('/tmp/no_log');
                        return 1;
                }
                if($size >= 1048576) {
			if(file_exists('/tmp/no_log')) unlink('/tmp/no_log');
                        return 1;
                }
                if($size >= 1024) {
                        return 0;
                }
                return 0;
	}

	function con_year() {
		global $logdir;
		$lyear=date('Y');
		$syear=date('y');
		$year="$syear:$lyear";
		$w='1';
		if(file_exists("$logdir/year.lst")) {
			$handle=fopen("$logdir/year.lst",'r');
			while(!feof($handle)) {
				$buff=fgets($handle,150);
				$buff=trim($buff);
				if($buff==$year) $w='0';
			}
			fclose($handle);
		}
		if($w==1) {
			$handle=fopen("$logdir/year.lst",'a');
			fputs($handle,"$year\n");
			fflush($handle);
			fclose($handle);
		}
	}
	function do_setting() {
		global $hash_ignore,$hash_block,$logdir,$block,$unblock,$iplist;
		$logdir=get_ini('IDS','REPORT');
		$block=get_ini('IDS','BLOCK');
		$unblock=get_ini('IDS','UNBLOCK');
		$iplist=get_ini('IDS','IPLIST');
		if(!is_dir($logdir)) {
			shell_exec("mkdir -p $logdir");
		}
		$hash_ignore=array();
		$hash_block=array("type"=>'',"ip"=>'',"time"=>'');
	}

	function do_log($type,$month,$day,$time,$text,$proto,$src_ip,$src_po,$des_ip,$des_po) {
		global $logdir,$time_alarm,$pslog,$allog;
		if(check_log_space()==0) {
			if(!file_exists('/tmp/no_log')) touch('/tmp/no_log');
			return;
		}
		$year=date("Y");
		$mon=array("Jan"=>'01',"Feb"=>'02',"Mar"=>'03',"Apr"=>'04',"May"=>'05',"Jun"=>'06',"Jul"=>'07',"Aug"=>'08',"Sep"=>'09',"Oct"=>'10',"Nov"=>'11',"Dec"=>'12');
		$date="$day/$mon[$month]/$year";
		$time=_mktime($date,$time);
		$ldate=date('y')."-$mon[$month]"."-".date('d');
		$pslog="$logdir/$ldate-p.log";
		$allog="$logdir/$ldate-a.log";
		$mallog="$logdir/alert.log";
		$text=str_replace("(spp_rpc_decode)",'',$text);
		$text=str_replace("(snort_decoder):",'',$text);
		$text=str_replace("(_decoder):",'',$text);
		$text=str_replace('snort','',$text);
		$text=str_replace('snort_','',$text);
		$extip=get_net(get_ini('NETWORK','OUTSIDE_IP'));
		$intip=get_net(get_ini('NETWORK','INSIDE_IP'));
		$dmz1ip=get_net(get_ini('NETWORK','DMZ1_IP'));
		$dmz2ip=get_net(get_ini('NETWORK','DMZ2_IP'));
		$text0=$text;
		if(get_net($src_ip)==$extip) {
			$text0="(Attack from External Network) $text";
		} elseif(get_net($src_ip)==$intip) {
			$text0="(Attack from Secure Network) $text";
		} elseif(get_net($src_ip)==$dmz1ip) {
			$text0="(Attack from Primary DMZ Network) $text";
		} elseif(get_net($src_ip)==$dmz2ip) {
			$text0="(Attack from Secondary DMZ Network) $text";
		} else {
			$text0="(Attack from World Network) $text";
		}
		$text=$text0;
		unset($text0);
		switch($type) {
			case 'A':
			$handle=fopen($allog, "a");
			fputs($handle,"DATE=$date TIME=$time STATUS=$text SRC_IP=$src_ip SRC_PORT=$src_po DES_IP=$des_ip DES_PORT=$des_po PROTO=$proto\n");
			fflush($handle);
			fclose($handle);
			$handle=fopen($mallog, "a");
			fputs($handle,"IDS -> $date $time $src_ip:$src_po -> $des_ip:$des_po ($proto) $text\n");
			fflush($handle);
			fclose($handle);
			break;
			case 'P':
			$handle=fopen($pslog, "a");
			fputs($handle,"DATE=$date TIME=$time STATUS=$text SRC_IP=$src_ip SRC_PORT=$src_po DES_IP=$des_ip DES_PORT=$des_po\n");
			fflush($handle);
			fclose($handle);
			$handle=fopen($mallog, "a");
			fputs($handle,"PORTSCAN -> $date $time $src_ip:$src_po -> $des_ip:$des_po (any) $text\n");
			fflush($handle);
			fclose($handle);
			break;
		}
		con_year();
	}
	
	function hash_ignore() {
		global $iplist, $hash_ignore;
		$list=preg_split("/,/",$iplist);
		$gateway=get_ini('NETWORK','GATEWAY');
		$eth1=get_ini('NETWORK','INSIDE_IP');
		$eth2=get_ini('NETWORK','OUTSIDE_IP');
		$eth3=get_ini('NETWORK','DMZ1_IP');
		$eth4=get_ini('NETWORK','DMZ2_IP');
		$hash_ignore[$gateway]='1';
		$hash_ignore['127.0.0.1']='1';
		$hash_ignore[$eth1]='1';
		$hash_ignore[$eth2]='1';
		$hash_ignore[$eth3]='1';
		$hash_ignore[$eth4]='1';
		foreach($list as $line) {
			if($line!='') {
				$hash_ignore[$line]='1';
			}
		}
		$cnt=count($hash_ignore)-1;
		$text="loading ignore list: $cnt $ip"; 
		syslog(LOG_INFO,"$text");
	}

	function do_block($src,$text) {
		global $hash_ignore, $hash_block, $block, $unblock;
		$ip='';
		//if((!isset($hash_ignore[$src])) && ($block==1) &&(!check_mynetwork($src))) {
		if((!isset($hash_ignore[$src])) && ($block==1)) {
			if((!isset($hash_block[$src]['ip'])) && ($hash_block[$src]['ip']!="$src")) {
				if(check_mynetwork($src)) {
					shell_exec("/sbin/iptables -I FORWARD -s $src -j DROP");
				} else {
					shell_exec("/sbin/iptables -I INPUT -s $src -j DROP");
				}
				syslog(LOG_INFO,"Blocking $src : $text");
				$hash_block[$src]['ip']=$src;
				$hash_block[$src]['time']='';
				// no unblock
				if($unblock!=0) {
					$time=time()+60*$unblock;
					$hash_block[$src]['time']=$time;
				}
			} 
		} else {
			if($hash_ignore[$src]==1) {
				$text="ignore $src : IP in my exclude list";
			//} elseif(check_mynetwork($src)) {
			//	$text="ignore $src : IP in my network";	
			} else {
				$text="ignore $src";
			}
			syslog(LOG_INFO,"$text");
		}
	}

	function do_unblock() {
		global $hash_block, $block, $unblock;
		foreach($hash_block as $line) {
			$src=$line['ip'];
			$time=$line['time'];
			if(($src!='') && ($time!='')) {
				if(time() >= $time) {
					unset($hash_block[$src]['ip'],$hash_block[$src]['time']);
					if(check_mynetwork($src)) {
						shell_exec("/sbin/iptables -D FORWARD -s $src -j DROP");
					} else {
						shell_exec("/sbin/iptables -D INPUT -s $src -j DROP");
					}
					//shell_exec("/sbin/iptables -D INPUT -s $src -j DROP");
					syslog(LOG_INFO,"Unblocking IP : $src");
				}
				if(is_dir("/var/idslog/$src")) shell_exec("rm -rf /var/idslog/$src");
				clearstatcache();
			}
		}
	}

	function do_clean_portlog() {
		if($handle = opendir("/var/idslog")) { 
			while(($src = readdir($handle)) !== false) {  
       				if($src != "." && $src != "..") {
					if(is_dir("/var/idslog/$src")) shell_exec("rm -rf /var/idslog/$src");
       				}	 
  			}
			clearstatcache();
   			closedir($handle);
		}
	}

	function do_reset() {
		global $hash_block;
		syslog(LOG_INFO,"Reset request");
		foreach($hash_block as $line) {
			$src=$line['ip'];
			if($src!='') {
				unset($hash_block[$src]['ip'],$hash_block[$src]['time']);
				shell_exec("/sbin/iptables -D INPUT -s $src -j DROP");
				syslog(LOG_INFO,"Unblocking IP : $src");
				if(is_dir("/var/idslog/$src")) shell_exec("rm -rf /var/idslog/$src");
				clearstatcache();
			}
		}
	}

	function log_parse($str) {
		$h1=shell_exec('hostname -s');
		list($hostname,$tmp)=preg_split("/\./",$h1);
		$hostname=trim($hostname);
		$drop='1';
		$active='1';
		if(preg_match("/^(\w+)\s+(\d+)\s+(\d+\:\d+\:\d+)\s+$hostname\ssnort\:\s*(.*)\s*(\{\w+})\s*(\d+\.\d+\.\d+\.\d+):(\d+)\s*->\s*(\d+\.\d+\.\d+\.\d+):(\d+)$/",$str,$ft)) {
			$month=$ft[1];
			$day=$ft[2];
			$time=$ft[3];
			list($tmp,$text)=explode("]",$ft[4]);
			$text=trim($text);
			$proto=trim(trim($ft[5],'}'),'{');
			$src_ip=$ft[6];
			$src_po=$ft[7];
			$des_ip=$ft[8];
			$des_po=$ft[9];
			if(preg_match("/(\d):(\d)\s+(.*)/",$text,$rk)) {
				$drop=$rk[1];
				$active=$rk[2];
				$text=$rk[3];
			}
			if($active==0) return;
			if(preg_match("/^SCAN/",$text)) {
				do_log('P',$month,$day,$time,$text,$proto,$src_ip,$src_po,$des_ip,$des_po);
			} else {
				do_log('A',$month,$day,$time,$text,$proto,$src_ip,$src_po,$des_ip,$des_po);
			}
			if($drop==1) do_block($src_ip,$text);
			return;
		}
		if(preg_match("/^(\w+)\s+(\d+)\s+(\d+\:\d+\:\d+)\s+$hostname\ssnort\:\s*(.*)\s*(\{\w+})\s*(\d+\.\d+\.\d+\.\d+)\s*->\s*(\d+\.\d+\.\d+\.\d+)$/",$str,$ft)) {
			$month=$ft[1];
			$day=$ft[2];
			$time=$ft[3];
			list($tmp,$text)=explode("]",$ft[4]);
			$text=trim($text);
			$proto=trim(trim($ft[5],'}'),'{');
			$src_ip=$ft[6];
			$des_ip=$ft[7];
			if(preg_match("/(\d):(\d)\s+(.*)/",$text,$rk)) {
				$drop=$rk[1];
				$active=$rk[2];
				$text=$rk[3];
			}
			if($active==0) return;
			if(preg_match("/^SCAN/",$text)) {
				do_log('P',$month,$day,$time,$text,$proto,$src_ip,'any',$des_ip,'any');
			} else {
				do_log('A',$month,$day,$time,$text,$proto,$src_ip,'any',$des_ip,'any');
			}
			if($drop==1) do_block($src_ip,$text);
			return;
		}
		if(preg_match("/^(\w+)\s+(\d+)\s+(\d+\:\d+\:\d+)\s+$hostname\ssnort\:\s*spp_portscan:\sPORTSCAN\sDETECTED\sfrom\s*(\d+\.\d+\.\d+\.\d+)\s*(.*)$/",$str,$ft)) {
			$month=$ft[1];
			$day=$ft[2];
			$time=$ft[3];
			$src_ip=$ft[4];
			$status=trim($ft[5]);
			$status=trim(trim($status,')'),'(');
			do_log('P',$month,$day,$time,$status,'',$src_ip,'any','any','any');
			do_block($src_ip,$text);
			return;
		}
		if(preg_match("/^(\w+)\s+(\d+)\s+(\d+\:\d+\:\d+)\s+$hostname\ssnort\:\s*spp_portscan:\sPORTSCAN\sDETECTED\sto\sport\s(\d+)\sfrom\s*(\d+\.\d+\.\d+\.\d+)\s*(.*)$/",$str,$ft)) {
			$month=$ft[1];
			$day=$ft[2];
			$time=$ft[3];
			$des_po=$ft[4];
			$src_ip=$ft[5];
			$status=trim($ft[6]);
			$status=trim(trim($status,')'),'(');
			do_log('P',$month,$day,$time,$status,'',$src_ip,'any','any',$des_po);
			do_block($src_ip,$status);
			return;
		}
		if(preg_match("/^(\w+)\s+(\d+)\s+(\d+\:\d+\:\d+)\s+$hostname\ssnort\:\s*spp_portscan:\sportscan\sstatus\sfrom\s(\d+\.\d+\.\d+\.\d+)\:\s(.*)\:\s(.*)$/",$str,$ft)) {
			$month=$ft[1];
			$day=$ft[2];
			$time=$ft[3];
			$src_ip=$ft[4];
			$status0=trim($ft[5]);
			$status1=trim($ft[6]);
			$status="$status0 $status1";
			do_log('P',$month,$day,$time,$status,'',$src_ip,'any','any','any');
			do_block($src_ip,$status);
			return;
		}

	}
	
	function main_loop() {
        	$var='';
		for(;;) {
			sleep(1);
			do_clean_portlog(); // our tmpfs cannot handle this large log
			if(file_exists('/tmp/block_reset')) {
				do_setting();
				do_reset();
				unlink('/tmp/block_reset');
			}
			if(file_exists('/tmp/ids_reset')) {
				if(file_exists('/etc/init.d/ids.sh')) {
					shell_exec('/etc/init.d/ids.sh stop');
					shell_exec('/etc/init.d/ids.sh start');
				}
				do_setting();
				do_reset();
				unlink('/tmp/ids_reset');
			}
			if(file_exists('/var/log/messages')) {
                		$file=file('/var/log/messages');
				$val=$file[count($file)-1];
				if($val!=$var) {
                			log_parse($val);
				}
				$var=$val;
				if(count($file) > 50) {
					shell_exec('cat /dev/null > /var/log/messages');
					flush();
				}
				unset($file);
			}
			do_unblock();
			shell_exec('cat /dev/null > /var/log/portscan.log');
			flush();
        	}
	}

	do_setting();
	con_year();
	set_time_limit(0);
	hash_ignore();
	main_loop();
?>



