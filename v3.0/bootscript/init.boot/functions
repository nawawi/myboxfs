# functions
__SPACE="                                       ";
grepn() { echo ${1%%$2*};}
grepv() { echo ${1##*$2};}

read_cmdline() {
        if [ -z "$1" ]; then
                return 0
        fi
        egrep -io "(^|[[:space:]]+)$1=([^[:space:]]+)" /proc/cmdline | egrep -io "[^=]+\$"
}
read_single_cmdline() {
        if [ -z "$1" ]; then
                return 0
        fi
        egrep -io "$1" /proc/cmdline
}

strstr() {
        [ "$1" = "$2" ] && return 0
        slice=${1#*$2*}
        [ "$slice" = "$1" ] && return 1
        return 0
}

do_spin() {
        local msg="$1";
        local spin="- \\ | / \\ | /";
        for x in $spin; do
                usleep 0;
                echo -n -e "\r-> $msg $x";
        done
}

basename() {
	local name="${1##*/}"
	local opt="$2";
	[ "x$opt" != "x" ] && name="${name%.$opt}";
	echo "${name%$2}";
}

dirname() {
	local dir="${1%${1##*/}}";
	[ "${dir:=./}" != "/" ] && dir="${dir%?}";
	echo "$dir";
}

do_progress() {
	local msg="$1";
	local ok=0;
	while read buff; do
		do_spin "$msg";
	done
	echo -n -e "\r$msg Done.\n";
}

set_lcd() {
	if [ -f "/var/sys/lcd_proc" -a -f "/bin/lcds" ]; then
        	LCD_PROG=1;
	elif [ -f "/var/sys/lcd_com" -a -f "/bin/lcdd" ]; then
                LCD_PROG=0;
	else
		LCD_PROG=-1;
        fi
}

set_firmware_version() {
	if [ -f "/strg/mybox/update/SYSTEM.VERSION" ]; then
		__VER=$(cat /strg/mybox/update/SYSTEM.VERSION);
        	echo "$__VER" > /etc/firmware
		if [ ! -f "/strg/mybox/update/FIRMWARE.NEW" ]; then
			echo "update-$__VER.mpu" > /strg/mybox/update/FIRMWARE.NEW
		fi
	fi
}

lcdd_msg() {
        if [ "$LCD_PROG" = "1" ]; then
		echo "$2" > /var/sys/lcd_msg
        elif [ "$LCD_PROG" = "0" ]; then
		/bin/lcdd "$1" "$2";
        fi
}

ps() {
        /bin/ps
}

cd() {
	if [ -z "$1" -a "$1" = "" ]; then
		[ ! -d "/config" ] && mkdir /config >/dev/null 2>&1
		builtin cd /config
	else
		builtin cd "$@"
	fi
}

ls() {
	/bin/ls -l $@
}

dir() {
	ls;
}

df() {
	/bin/df -x rootfs $@
}

upgrade() {
	local f="$1"
	if [ ! -f "$f" ]; then
		echo "Usage: upgrade <update_file>";
		exit 1;
	fi
	if [ ! -d "/strg/mybox/update/files" ]; then
		echo "upgrade failed!";
		exit 1;
	fi
	echo "Preparing file..";
	mv $f /strg/mybox/update/files/
	mfs-update.exc update-firmware-force verbose
	exit 0;
}

systemdb() {
	local arg=$@
	if [ -f "/strg/mybox/db/system.db" ]; then
		sqlite /strg/mybox/db/system.db "$@"
	else
		echo "No database found";
	fi
}

dbdump() {
	systemdb .dump
}
dbflush() {
	systemdb vacuum
}

who() {
	[ -f "/service/init/initconf.init" ] && /service/init/initconf.init who
}

w() {
	who;
}

reboot() {
	if [ "x$SSH_CLIENT" != "x" ]; then
		IP=$(echo "$SSH_CLIENT" |awk '{print $1}'); 
		echo "Logged IP $IP" >/var/sys/reboot_from_console
	else
		echo "Logged TTY $(tty)" >/var/sys/reboot_from_console
	fi
	:> /var/sys/lcd_reboot
	/bin/reboot -d 5
	exit 0;
}
shutdown() {
	if [ "x$SSH_CLIENT" != "x" ]; then
		IP=$(echo "$SSH_CLIENT" |awk '{print $1}'); 
		echo "Logged IP $IP" >/var/sys/shutdown_from_console
	else
		echo "Logged TTY $(tty)" >/var/sys/shutdown_from_console
	fi
	:> /var/sys/lcd_shutdown
	/bin/poweroff -d 5
	exit 0;
}

poweroff() {
	shutdown;
}

halt() {
	shutdown;
}
